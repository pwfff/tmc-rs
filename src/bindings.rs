/* automatically generated by rust-bindgen 0.65.1 */

extern crate tmc_rs_macros;
use tmc_rs_macros::generate_fields;

#[generate_fields]

#[allow(non_snake_case, non_camel_case_types, non_upper_case_globals)]
pub mod root {
    #[allow(unused_imports)]
    use self::super::root;
    pub const TMC_WRITE_BIT: u32 = 128;
    pub const TMC_ADDRESS_MASK: u32 = 127;
    pub const TMC_DEFAULT_MOTOR: u32 = 0;
    pub const TMC_REGISTER_COUNT: u32 = 128;
    pub const __bool_true_false_are_defined: u32 = 1;
    pub const true_: u32 = 1;
    pub const false_: u32 = 0;
    pub const _STDINT_H: u32 = 1;
    pub const _FEATURES_H: u32 = 1;
    pub const _DEFAULT_SOURCE: u32 = 1;
    pub const __GLIBC_USE_ISOC2X: u32 = 0;
    pub const __USE_ISOC11: u32 = 1;
    pub const __USE_ISOC99: u32 = 1;
    pub const __USE_ISOC95: u32 = 1;
    pub const __USE_POSIX_IMPLICITLY: u32 = 1;
    pub const _POSIX_SOURCE: u32 = 1;
    pub const _POSIX_C_SOURCE: u32 = 200809;
    pub const __USE_POSIX: u32 = 1;
    pub const __USE_POSIX2: u32 = 1;
    pub const __USE_POSIX199309: u32 = 1;
    pub const __USE_POSIX199506: u32 = 1;
    pub const __USE_XOPEN2K: u32 = 1;
    pub const __USE_XOPEN2K8: u32 = 1;
    pub const _ATFILE_SOURCE: u32 = 1;
    pub const __WORDSIZE: u32 = 64;
    pub const __WORDSIZE_TIME64_COMPAT32: u32 = 1;
    pub const __SYSCALL_WORDSIZE: u32 = 64;
    pub const __TIMESIZE: u32 = 64;
    pub const __USE_MISC: u32 = 1;
    pub const __USE_ATFILE: u32 = 1;
    pub const __USE_FORTIFY_LEVEL: u32 = 0;
    pub const __GLIBC_USE_DEPRECATED_GETS: u32 = 0;
    pub const __GLIBC_USE_DEPRECATED_SCANF: u32 = 0;
    pub const _STDC_PREDEF_H: u32 = 1;
    pub const __STDC_IEC_559__: u32 = 1;
    pub const __STDC_IEC_60559_BFP__: u32 = 201404;
    pub const __STDC_IEC_559_COMPLEX__: u32 = 1;
    pub const __STDC_IEC_60559_COMPLEX__: u32 = 201404;
    pub const __STDC_ISO_10646__: u32 = 201706;
    pub const __GNU_LIBRARY__: u32 = 6;
    pub const __GLIBC__: u32 = 2;
    pub const __GLIBC_MINOR__: u32 = 37;
    pub const _SYS_CDEFS_H: u32 = 1;
    pub const __glibc_c99_flexarr_available: u32 = 1;
    pub const __LDOUBLE_REDIRECTS_TO_FLOAT128_ABI: u32 = 0;
    pub const __HAVE_GENERIC_SELECTION: u32 = 1;
    pub const __GLIBC_USE_LIB_EXT2: u32 = 0;
    pub const __GLIBC_USE_IEC_60559_BFP_EXT: u32 = 0;
    pub const __GLIBC_USE_IEC_60559_BFP_EXT_C2X: u32 = 0;
    pub const __GLIBC_USE_IEC_60559_EXT: u32 = 0;
    pub const __GLIBC_USE_IEC_60559_FUNCS_EXT: u32 = 0;
    pub const __GLIBC_USE_IEC_60559_FUNCS_EXT_C2X: u32 = 0;
    pub const __GLIBC_USE_IEC_60559_TYPES_EXT: u32 = 0;
    pub const _BITS_TYPES_H: u32 = 1;
    pub const _BITS_TYPESIZES_H: u32 = 1;
    pub const __OFF_T_MATCHES_OFF64_T: u32 = 1;
    pub const __INO_T_MATCHES_INO64_T: u32 = 1;
    pub const __RLIM_T_MATCHES_RLIM64_T: u32 = 1;
    pub const __STATFS_MATCHES_STATFS64: u32 = 1;
    pub const __KERNEL_OLD_TIMEVAL_MATCHES_TIMEVAL64: u32 = 1;
    pub const __FD_SETSIZE: u32 = 1024;
    pub const _BITS_TIME64_H: u32 = 1;
    pub const _BITS_WCHAR_H: u32 = 1;
    pub const _BITS_STDINT_INTN_H: u32 = 1;
    pub const _BITS_STDINT_UINTN_H: u32 = 1;
    pub const INT8_MIN: i32 = -128;
    pub const INT16_MIN: i32 = -32768;
    pub const INT32_MIN: i32 = -2147483648;
    pub const INT8_MAX: u32 = 127;
    pub const INT16_MAX: u32 = 32767;
    pub const INT32_MAX: u32 = 2147483647;
    pub const UINT8_MAX: u32 = 255;
    pub const UINT16_MAX: u32 = 65535;
    pub const UINT32_MAX: u32 = 4294967295;
    pub const INT_LEAST8_MIN: i32 = -128;
    pub const INT_LEAST16_MIN: i32 = -32768;
    pub const INT_LEAST32_MIN: i32 = -2147483648;
    pub const INT_LEAST8_MAX: u32 = 127;
    pub const INT_LEAST16_MAX: u32 = 32767;
    pub const INT_LEAST32_MAX: u32 = 2147483647;
    pub const UINT_LEAST8_MAX: u32 = 255;
    pub const UINT_LEAST16_MAX: u32 = 65535;
    pub const UINT_LEAST32_MAX: u32 = 4294967295;
    pub const INT_FAST8_MIN: i32 = -128;
    pub const INT_FAST16_MIN: i64 = -9223372036854775808;
    pub const INT_FAST32_MIN: i64 = -9223372036854775808;
    pub const INT_FAST8_MAX: u32 = 127;
    pub const INT_FAST16_MAX: u64 = 9223372036854775807;
    pub const INT_FAST32_MAX: u64 = 9223372036854775807;
    pub const UINT_FAST8_MAX: u32 = 255;
    pub const UINT_FAST16_MAX: i32 = -1;
    pub const UINT_FAST32_MAX: i32 = -1;
    pub const INTPTR_MIN: i64 = -9223372036854775808;
    pub const INTPTR_MAX: u64 = 9223372036854775807;
    pub const UINTPTR_MAX: i32 = -1;
    pub const PTRDIFF_MIN: i64 = -9223372036854775808;
    pub const PTRDIFF_MAX: u64 = 9223372036854775807;
    pub const SIG_ATOMIC_MIN: i32 = -2147483648;
    pub const SIG_ATOMIC_MAX: u32 = 2147483647;
    pub const SIZE_MAX: i32 = -1;
    pub const WINT_MIN: u32 = 0;
    pub const WINT_MAX: u32 = 4294967295;
    pub const FALSE: u32 = 0;
    pub const TRUE: u32 = 1;
    pub const BIT0: u32 = 1;
    pub const BIT1: u32 = 2;
    pub const BIT2: u32 = 4;
    pub const BIT3: u32 = 8;
    pub const BIT4: u32 = 16;
    pub const BIT5: u32 = 32;
    pub const BIT6: u32 = 64;
    pub const BIT7: u32 = 128;
    pub const BIT8: u32 = 256;
    pub const BIT9: u32 = 512;
    pub const BIT10: u32 = 1024;
    pub const BIT11: u32 = 2048;
    pub const BIT12: u32 = 4096;
    pub const BIT13: u32 = 8192;
    pub const BIT14: u32 = 16384;
    pub const BIT15: u32 = 32768;
    pub const BIT16: u32 = 65536;
    pub const BIT17: u32 = 131072;
    pub const BIT18: u32 = 262144;
    pub const BIT19: u32 = 524288;
    pub const BIT20: u32 = 1048576;
    pub const BIT21: u32 = 2097152;
    pub const BIT22: u32 = 4194304;
    pub const BIT23: u32 = 8388608;
    pub const BIT24: u32 = 16777216;
    pub const BIT25: u32 = 33554432;
    pub const BIT26: u32 = 67108864;
    pub const BIT27: u32 = 134217728;
    pub const BIT28: u32 = 268435456;
    pub const BIT29: u32 = 536870912;
    pub const BIT30: u32 = 1073741824;
    pub const BIT31: u32 = 2147483648;
    pub const BYTE0_MASK: u32 = 255;
    pub const BYTE0_SHIFT: u32 = 0;
    pub const BYTE1_MASK: u32 = 65280;
    pub const BYTE1_SHIFT: u32 = 8;
    pub const BYTE2_MASK: u32 = 16711680;
    pub const BYTE2_SHIFT: u32 = 16;
    pub const BYTE3_MASK: u32 = 4278190080;
    pub const BYTE3_SHIFT: u32 = 24;
    pub const BYTE4_MASK: u64 = 1095216660480;
    pub const BYTE4_SHIFT: u32 = 32;
    pub const BYTE5_MASK: u64 = 280375465082880;
    pub const BYTE5_SHIFT: u32 = 40;
    pub const BYTE6_MASK: u64 = 71776119061217280;
    pub const BYTE6_SHIFT: u32 = 48;
    pub const BYTE7_MASK: i64 = -72057594037927936;
    pub const BYTE7_SHIFT: u32 = 56;
    pub const SHORT0_MASK: u32 = 65535;
    pub const SHORT0_SHIFT: u32 = 0;
    pub const SHORT1_MASK: u32 = 4294901760;
    pub const SHORT1_SHIFT: u32 = 16;
    pub const SHORT2_MASK: u64 = 281470681743360;
    pub const SHORT2_SHIFT: u32 = 32;
    pub const SHORT3_MASK: i64 = -281474976710656;
    pub const SHORT3_SHIFT: u32 = 48;
    pub const WORD0_MASK: u32 = 4294967295;
    pub const WORD0_SHIFT: u32 = 0;
    pub const WORD1_MASK: i64 = -4294967296;
    pub const WORD1_SHIFT: u32 = 32;
    pub const CRC_TABLE_COUNT: u32 = 2;
    pub const TMC_ACCESS_NONE: u32 = 0;
    pub const TMC_ACCESS_READ: u32 = 1;
    pub const TMC_ACCESS_WRITE: u32 = 2;
    pub const TMC_ACCESS_DIRTY: u32 = 8;
    pub const TMC_ACCESS_RW_SPECIAL: u32 = 16;
    pub const TMC_ACCESS_FLAGS: u32 = 32;
    pub const TMC_ACCESS_HW_PRESET: u32 = 64;
    pub const TMC_ACCESS_RW: u32 = 3;
    pub const TMC_ACCESS_RW_SEPARATE: u32 = 19;
    pub const TMC_ACCESS_R_FLAGS: u32 = 33;
    pub const TMC_ACCESS_RW_FLAGS: u32 = 35;
    pub const TMC_ACCESS_W_PRESET: u32 = 66;
    pub const TMC_ACCESS_RW_PRESET: u32 = 67;
    pub const ____: u32 = 0;
    pub const N_A: u32 = 0;
    pub const _STDLIB_H: u32 = 1;
    pub const WNOHANG: u32 = 1;
    pub const WUNTRACED: u32 = 2;
    pub const WSTOPPED: u32 = 2;
    pub const WEXITED: u32 = 4;
    pub const WCONTINUED: u32 = 8;
    pub const WNOWAIT: u32 = 16777216;
    pub const __WNOTHREAD: u32 = 536870912;
    pub const __WALL: u32 = 1073741824;
    pub const __WCLONE: u32 = 2147483648;
    pub const __W_CONTINUED: u32 = 65535;
    pub const __WCOREFLAG: u32 = 128;
    pub const __HAVE_FLOAT128: u32 = 0;
    pub const __HAVE_DISTINCT_FLOAT128: u32 = 0;
    pub const __HAVE_FLOAT64X: u32 = 1;
    pub const __HAVE_FLOAT64X_LONG_DOUBLE: u32 = 1;
    pub const __HAVE_FLOAT16: u32 = 0;
    pub const __HAVE_FLOAT32: u32 = 1;
    pub const __HAVE_FLOAT64: u32 = 1;
    pub const __HAVE_FLOAT32X: u32 = 1;
    pub const __HAVE_FLOAT128X: u32 = 0;
    pub const __HAVE_DISTINCT_FLOAT16: u32 = 0;
    pub const __HAVE_DISTINCT_FLOAT32: u32 = 0;
    pub const __HAVE_DISTINCT_FLOAT64: u32 = 0;
    pub const __HAVE_DISTINCT_FLOAT32X: u32 = 0;
    pub const __HAVE_DISTINCT_FLOAT64X: u32 = 0;
    pub const __HAVE_DISTINCT_FLOAT128X: u32 = 0;
    pub const __HAVE_FLOATN_NOT_TYPEDEF: u32 = 0;
    pub const __ldiv_t_defined: u32 = 1;
    pub const __lldiv_t_defined: u32 = 1;
    pub const RAND_MAX: u32 = 2147483647;
    pub const EXIT_FAILURE: u32 = 1;
    pub const EXIT_SUCCESS: u32 = 0;
    pub const _SYS_TYPES_H: u32 = 1;
    pub const __clock_t_defined: u32 = 1;
    pub const __clockid_t_defined: u32 = 1;
    pub const __time_t_defined: u32 = 1;
    pub const __timer_t_defined: u32 = 1;
    pub const __BIT_TYPES_DEFINED__: u32 = 1;
    pub const _ENDIAN_H: u32 = 1;
    pub const _BITS_ENDIAN_H: u32 = 1;
    pub const __LITTLE_ENDIAN: u32 = 1234;
    pub const __BIG_ENDIAN: u32 = 4321;
    pub const __PDP_ENDIAN: u32 = 3412;
    pub const _BITS_ENDIANNESS_H: u32 = 1;
    pub const __BYTE_ORDER: u32 = 1234;
    pub const __FLOAT_WORD_ORDER: u32 = 1234;
    pub const LITTLE_ENDIAN: u32 = 1234;
    pub const BIG_ENDIAN: u32 = 4321;
    pub const PDP_ENDIAN: u32 = 3412;
    pub const BYTE_ORDER: u32 = 1234;
    pub const _BITS_BYTESWAP_H: u32 = 1;
    pub const _BITS_UINTN_IDENTITY_H: u32 = 1;
    pub const _SYS_SELECT_H: u32 = 1;
    pub const __sigset_t_defined: u32 = 1;
    pub const __timeval_defined: u32 = 1;
    pub const _STRUCT_TIMESPEC: u32 = 1;
    pub const FD_SETSIZE: u32 = 1024;
    pub const _BITS_PTHREADTYPES_COMMON_H: u32 = 1;
    pub const _THREAD_SHARED_TYPES_H: u32 = 1;
    pub const _BITS_PTHREADTYPES_ARCH_H: u32 = 1;
    pub const __SIZEOF_PTHREAD_MUTEX_T: u32 = 40;
    pub const __SIZEOF_PTHREAD_ATTR_T: u32 = 56;
    pub const __SIZEOF_PTHREAD_RWLOCK_T: u32 = 56;
    pub const __SIZEOF_PTHREAD_BARRIER_T: u32 = 32;
    pub const __SIZEOF_PTHREAD_MUTEXATTR_T: u32 = 4;
    pub const __SIZEOF_PTHREAD_COND_T: u32 = 48;
    pub const __SIZEOF_PTHREAD_CONDATTR_T: u32 = 4;
    pub const __SIZEOF_PTHREAD_RWLOCKATTR_T: u32 = 8;
    pub const __SIZEOF_PTHREAD_BARRIERATTR_T: u32 = 4;
    pub const _THREAD_MUTEX_INTERNAL_H: u32 = 1;
    pub const __PTHREAD_MUTEX_HAVE_PREV: u32 = 1;
    pub const __have_pthread_attr_t: u32 = 1;
    pub const _ALLOCA_H: u32 = 1;
    pub const TMC2240_GCONF: u32 = 0;
    pub const TMC2240_GSTAT: u32 = 1;
    pub const TMC2240_IFCNT: u32 = 2;
    pub const TMC2240_SLAVECONF: u32 = 3;
    pub const TMC2240_IOIN: u32 = 4;
    pub const TMC2240_DRV_CONF: u32 = 10;
    pub const TMC2240_GLOBAL_SCALER: u32 = 11;
    pub const TMC2240_IHOLD_IRUN: u32 = 16;
    pub const TMC2240_TPOWERDOWN: u32 = 17;
    pub const TMC2240_TSTEP: u32 = 18;
    pub const TMC2240_TPWMTHRS: u32 = 19;
    pub const TMC2240_TCOOLTHRS: u32 = 20;
    pub const TMC2240_THIGH: u32 = 21;
    pub const TMC2240_DIRECT_MODE: u32 = 45;
    pub const TMC2240_ENCMODE: u32 = 56;
    pub const TMC2240_XENC: u32 = 57;
    pub const TMC2240_ENC_CONST: u32 = 58;
    pub const TMC2240_ENC_STATUS: u32 = 59;
    pub const TMC2240_ENC_LATCH: u32 = 60;
    pub const TMC2240_ADC_VSUPPLY_AIN: u32 = 80;
    pub const TMC2240_ADC_TEMP: u32 = 81;
    pub const TMC2240_OTW_OV_VTH: u32 = 82;
    pub const TMC2240_MSLUT0: u32 = 96;
    pub const TMC2240_MSLUT1: u32 = 97;
    pub const TMC2240_MSLUT2: u32 = 98;
    pub const TMC2240_MSLUT3: u32 = 99;
    pub const TMC2240_MSLUT4: u32 = 100;
    pub const TMC2240_MSLUT5: u32 = 101;
    pub const TMC2240_MSLUT6: u32 = 102;
    pub const TMC2240_MSLUT7: u32 = 103;
    pub const TMC2240_MSLUTSEL: u32 = 104;
    pub const TMC2240_MSLUTSTART: u32 = 105;
    pub const TMC2240_MSCNT: u32 = 106;
    pub const TMC2240_MSCURACT: u32 = 107;
    pub const TMC2240_CHOPCONF: u32 = 108;
    pub const TMC2240_COOLCONF: u32 = 109;
    pub const TMC2240_DCCTRL: u32 = 110;
    pub const TMC2240_DRVSTATUS: u32 = 111;
    pub const TMC2240_PWMCONF: u32 = 112;
    pub const TMC2240_PWMSCALE: u32 = 113;
    pub const TMC2240_PWM_AUTO: u32 = 114;
    pub const TMC2240_SG4_THRS: u32 = 116;
    pub const TMC2240_SG4_RESULT: u32 = 117;
    pub const TMC2240_SG4_IND: u32 = 118;
    pub const TMC2240_REGISTER_COUNT: u32 = 128;
    pub const TMC2240_MOTORS: u32 = 1;
    pub const TMC2240_WRITE_BIT: u32 = 128;
    pub const TMC2240_ADDRESS_MASK: u32 = 127;
    pub const TMC2240_MAX_VELOCITY: u32 = 8388096;
    pub const TMC2240_MODE_POSITION: u32 = 0;
    pub const TMC2240_MODE_VELPOS: u32 = 1;
    pub const TMC2240_MODE_VELNEG: u32 = 2;
    pub const TMC2240_MODE_HOLD: u32 = 3;
    pub const TMC2240_SW_STOPL_ENABLE: u32 = 1;
    pub const TMC2240_SW_STOPR_ENABLE: u32 = 2;
    pub const TMC2240_SW_STOPL_POLARITY: u32 = 4;
    pub const TMC2240_SW_STOPR_POLARITY: u32 = 8;
    pub const TMC2240_SW_SWAP_LR: u32 = 16;
    pub const TMC2240_SW_LATCH_L_ACT: u32 = 32;
    pub const TMC2240_SW_LATCH_L_INACT: u32 = 64;
    pub const TMC2240_SW_LATCH_R_ACT: u32 = 128;
    pub const TMC2240_SW_LATCH_R_INACT: u32 = 256;
    pub const TMC2240_SW_LATCH_ENC: u32 = 512;
    pub const TMC2240_SW_SG_STOP: u32 = 1024;
    pub const TMC2240_SW_SOFTSTOP: u32 = 2048;
    pub const TMC2240_RS_STOPL: u32 = 1;
    pub const TMC2240_RS_STOPR: u32 = 2;
    pub const TMC2240_RS_LATCHL: u32 = 4;
    pub const TMC2240_RS_LATCHR: u32 = 8;
    pub const TMC2240_RS_EV_STOPL: u32 = 16;
    pub const TMC2240_RS_EV_STOPR: u32 = 32;
    pub const TMC2240_RS_EV_STOP_SG: u32 = 64;
    pub const TMC2240_RS_EV_POSREACHED: u32 = 128;
    pub const TMC2240_RS_VELREACHED: u32 = 256;
    pub const TMC2240_RS_POSREACHED: u32 = 512;
    pub const TMC2240_RS_VZERO: u32 = 1024;
    pub const TMC2240_RS_ZEROWAIT: u32 = 2048;
    pub const TMC2240_RS_SECONDMOVE: u32 = 4096;
    pub const TMC2240_RS_SG: u32 = 8192;
    pub const TMC2240_EM_DECIMAL: u32 = 1024;
    pub const TMC2240_EM_LATCH_XACT: u32 = 512;
    pub const TMC2240_EM_CLR_XENC: u32 = 256;
    pub const TMC2240_EM_NEG_EDGE: u32 = 128;
    pub const TMC2240_EM_POS_EDGE: u32 = 64;
    pub const TMC2240_EM_CLR_ONCE: u32 = 32;
    pub const TMC2240_EM_CLR_CONT: u32 = 16;
    pub const TMC2240_EM_IGNORE_AB: u32 = 8;
    pub const TMC2240_EM_POL_N: u32 = 4;
    pub const TMC2240_EM_POL_B: u32 = 2;
    pub const TMC2240_EM_POL_A: u32 = 1;
    pub const TMC2240_SPI_STATUS_RESET_FLAG_MASK: u32 = 1;
    pub const TMC2240_SPI_STATUS_RESET_FLAG_SHIFT: u32 = 0;
    pub const TMC2240_SPI_STATUS_DRIVER_ERROR_MASK: u32 = 2;
    pub const TMC2240_SPI_STATUS_DRIVER_ERROR_SHIFT: u32 = 1;
    pub const TMC2240_SPI_STATUS_SG2_MASK: u32 = 4;
    pub const TMC2240_SPI_STATUS_SG2_SHIFT: u32 = 2;
    pub const TMC2240_SPI_STATUS_STANDSTILL_MASK: u32 = 8;
    pub const TMC2240_SPI_STATUS_STANDSTILL_SHIFT: u32 = 3;
    pub const TMC2240_SPI_STATUS_VELOCITY_REACHED_MASK: u32 = 16;
    pub const TMC2240_SPI_STATUS_VELOCITY_REACHED_SHIFT: u32 = 4;
    pub const TMC2240_SPI_STATUS_POSITION_REACHED_MASK: u32 = 32;
    pub const TMC2240_SPI_STATUS_POSITION_REACHED_SHIFT: u32 = 5;
    pub const TMC2240_SPI_STATUS_STATUS_STOP_L_MASK: u32 = 64;
    pub const TMC2240_SPI_STATUS_STATUS_STOP_L_SHIFT: u32 = 6;
    pub const TMC2240_SPI_STATUS_STATUS_STOP_R_MASK: u32 = 128;
    pub const TMC2240_SPI_STATUS_STATUS_STOP_R_SHIFT: u32 = 7;
    pub const TMC2240_FAST_STANDSTILL_MASK: u32 = 2;
    pub const TMC2240_FAST_STANDSTILL_SHIFT: u32 = 1;
    pub const TMC2240_EN_PWM_MODE_MASK: u32 = 4;
    pub const TMC2240_EN_PWM_MODE_SHIFT: u32 = 2;
    pub const TMC2240_MULTISTEP_FILT_MASK: u32 = 8;
    pub const TMC2240_MULTISTEP_FILT_SHIFT: u32 = 3;
    pub const TMC2240_SHAFT_MASK: u32 = 16;
    pub const TMC2240_SHAFT_SHIFT: u32 = 4;
    pub const TMC2240_DIAG0_ERROR_MASK: u32 = 32;
    pub const TMC2240_DIAG0_ERROR_SHIFT: u32 = 5;
    pub const TMC2240_DIAG0_OTPW_MASK: u32 = 64;
    pub const TMC2240_DIAG0_OTPW_SHIFT: u32 = 6;
    pub const TMC2240_DIAG0_STALL_MASK: u32 = 128;
    pub const TMC2240_DIAG0_STALL_SHIFT: u32 = 7;
    pub const TMC2240_DIAG1_STALL_MASK: u32 = 256;
    pub const TMC2240_DIAG1_STALL_SHIFT: u32 = 8;
    pub const TMC2240_DIAG1_INDEX_MASK: u32 = 512;
    pub const TMC2240_DIAG1_INDEX_SHIFT: u32 = 9;
    pub const TMC2240_DIAG1_ONSTATE_MASK: u32 = 1024;
    pub const TMC2240_DIAG1_ONSTATE_SHIFT: u32 = 10;
    pub const TMC2240_DIAG0_PUSHPULL_MASK: u32 = 4096;
    pub const TMC2240_DIAG0_PUSHPULL_SHIFT: u32 = 12;
    pub const TMC2240_DIAG1_PUSHPULL_MASK: u32 = 8192;
    pub const TMC2240_DIAG1_PUSHPULL_SHIFT: u32 = 13;
    pub const TMC2240_SMALL_HYSTERESIS_MASK: u32 = 16384;
    pub const TMC2240_SMALL_HYSTERESIS_SHIFT: u32 = 14;
    pub const TMC2240_STOP_ENABLE_MASK: u32 = 32768;
    pub const TMC2240_STOP_ENABLE_SHIFT: u32 = 15;
    pub const TMC2240_DIRECT_MODE_MASK: u32 = 65536;
    pub const TMC2240_DIRECT_MODE_SHIFT: u32 = 16;
    pub const TMC2240_RESET_MASK: u32 = 1;
    pub const TMC2240_RESET_SHIFT: u32 = 0;
    pub const TMC2240_DRV_ERR_MASK: u32 = 2;
    pub const TMC2240_DRV_ERR_SHIFT: u32 = 1;
    pub const TMC2240_UV_CP_MASK: u32 = 4;
    pub const TMC2240_UV_CP_SHIFT: u32 = 2;
    pub const TMC2240_REGISTER_RESET_MASK: u32 = 8;
    pub const TMC2240_REGISTER_RESET_SHIFT: u32 = 3;
    pub const TMC2240_VM_UVLO_MASK: u32 = 16;
    pub const TMC2240_VM_UVLO_SHIFT: u32 = 4;
    pub const TMC2240_IFCNT_MASK: u32 = 255;
    pub const TMC2240_IFCNT_SHIFT: u32 = 0;
    pub const TMC2240_SLAVEADDR_MASK: u32 = 255;
    pub const TMC2240_SLAVEADDR_SHIFT: u32 = 0;
    pub const TMC2240_SENDDELAY_MASK: u32 = 3840;
    pub const TMC2240_SENDDELAY_SHIFT: u32 = 8;
    pub const TMC2240_REFL_STEP_MASK: u32 = 1;
    pub const TMC2240_REFL_STEP_SHIFT: u32 = 0;
    pub const TMC2240_REFR_DIR_MASK: u32 = 2;
    pub const TMC2240_REFR_DIR_SHIFT: u32 = 1;
    pub const TMC2240_ENCB_CFG4_MASK: u32 = 4;
    pub const TMC2240_ENCB_CFG4_SHIFT: u32 = 2;
    pub const TMC2240_ENCA_CFG5_MASK: u32 = 8;
    pub const TMC2240_ENCA_CFG5_SHIFT: u32 = 3;
    pub const TMC2240_DRV_ENN_MASK: u32 = 16;
    pub const TMC2240_DRV_ENN_SHIFT: u32 = 4;
    pub const TMC2240_ENCN_CFG6_MASK: u32 = 32;
    pub const TMC2240_ENCN_CFG6_SHIFT: u32 = 5;
    pub const TMC2240_UART_EN_MASK: u32 = 64;
    pub const TMC2240_UART_EN_SHIFT: u32 = 6;
    pub const TMC2240_COMP_A_MASK: u32 = 256;
    pub const TMC2240_COMP_A_SHIFT: u32 = 8;
    pub const TMC2240_COMP_B_MASK: u32 = 512;
    pub const TMC2240_COMP_B_SHIFT: u32 = 9;
    pub const TMC2240_COMP_A1_A2_MASK: u32 = 1024;
    pub const TMC2240_COMP_A1_A2_SHIFT: u32 = 10;
    pub const TMC2240_COMP_B1_B2_MASK: u32 = 2048;
    pub const TMC2240_COMP_B1_B2_SHIFT: u32 = 11;
    pub const TMC2240_OUTPUT_MASK: u32 = 4096;
    pub const TMC2240_OUTPUT_SHIFT: u32 = 12;
    pub const TMC2240_EXT_RES_DET_MASK: u32 = 8192;
    pub const TMC2240_EXT_RES_DET_SHIFT: u32 = 13;
    pub const TMC2240_EXT_CLK_MASK: u32 = 16384;
    pub const TMC2240_EXT_CLK_SHIFT: u32 = 14;
    pub const TMC2240_ADC_ERR_MASK: u32 = 32768;
    pub const TMC2240_ADC_ERR_SHIFT: u32 = 15;
    pub const TMC2240_SILICON_RV_MASK: u32 = 458752;
    pub const TMC2240_SILICON_RV_SHIFT: u32 = 16;
    pub const TMC2240_VERSION_MASK: u32 = 4278190080;
    pub const TMC2240_VERSION_SHIFT: u32 = 24;
    pub const TMC2240_CURRENT_RANGE_MASK: u32 = 3;
    pub const TMC2240_CURRENT_RANGE_SHIFT: u32 = 0;
    pub const TMC2240_SLOPE_CONTROL_MASK: u32 = 48;
    pub const TMC2240_SLOPE_CONTROL_SHIFT: u32 = 4;
    pub const TMC2240_GLOBALSCALER_MASK: u32 = 255;
    pub const TMC2240_GLOBALSCALER_SHIFT: u32 = 0;
    pub const TMC2240_IHOLD_MASK: u32 = 31;
    pub const TMC2240_IHOLD_SHIFT: u32 = 0;
    pub const TMC2240_IRUN_MASK: u32 = 7936;
    pub const TMC2240_IRUN_SHIFT: u32 = 8;
    pub const TMC2240_IHOLDDELAY_MASK: u32 = 983040;
    pub const TMC2240_IHOLDDELAY_SHIFT: u32 = 16;
    pub const TMC2240_IRUNDELAY_MASK: u32 = 251658240;
    pub const TMC2240_IRUNDELAY_SHIFT: u32 = 24;
    pub const TMC2240_TPOWERDOWN_MASK: u32 = 255;
    pub const TMC2240_TPOWERDOWN_SHIFT: u32 = 0;
    pub const TMC2240_TSTEP_MASK: u32 = 1048575;
    pub const TMC2240_TSTEP_SHIFT: u32 = 0;
    pub const TMC2240_TPWMTHRS_MASK: u32 = 1048575;
    pub const TMC2240_TPWMTHRS_SHIFT: u32 = 0;
    pub const TMC2240_TCOOLTHRS_MASK: u32 = 1048575;
    pub const TMC2240_TCOOLTHRS_SHIFT: u32 = 0;
    pub const TMC2240_THIGH_MASK: u32 = 1048575;
    pub const TMC2240_THIGH_SHIFT: u32 = 0;
    pub const TMC2240_DIRECT_COIL_A_MASK: u32 = 511;
    pub const TMC2240_DIRECT_COIL_A_SHIFT: u32 = 0;
    pub const TMC2240_DIRECT_COIL_B_MASK: u32 = 33488896;
    pub const TMC2240_DIRECT_COIL_B_SHIFT: u32 = 16;
    pub const TMC2240_POL_A_MASK: u32 = 1;
    pub const TMC2240_POL_A_SHIFT: u32 = 0;
    pub const TMC2240_POL_B_MASK: u32 = 2;
    pub const TMC2240_POL_B_SHIFT: u32 = 1;
    pub const TMC2240_POL_N_MASK: u32 = 4;
    pub const TMC2240_POL_N_SHIFT: u32 = 2;
    pub const TMC2240_IGNORE_AB_MASK: u32 = 8;
    pub const TMC2240_IGNORE_AB_SHIFT: u32 = 3;
    pub const TMC2240_CLR_CONT_MASK: u32 = 16;
    pub const TMC2240_CLR_CONT_SHIFT: u32 = 4;
    pub const TMC2240_CLR_ONCE_MASK: u32 = 32;
    pub const TMC2240_CLR_ONCE_SHIFT: u32 = 5;
    pub const TMC2240_POS_NEG_EDGE_MASK: u32 = 192;
    pub const TMC2240_POS_NEG_EDGE_SHIFT: u32 = 6;
    pub const TMC2240_CLR_ENC_X_MASK: u32 = 256;
    pub const TMC2240_CLR_ENC_X_SHIFT: u32 = 8;
    pub const TMC2240_LATCH_X_ACT_MASK: u32 = 512;
    pub const TMC2240_LATCH_X_ACT_SHIFT: u32 = 9;
    pub const TMC2240_ENC_SEL_DECIMAL_MASK: u32 = 1024;
    pub const TMC2240_ENC_SEL_DECIMAL_SHIFT: u32 = 10;
    pub const TMC2240_X_ENC_MASK: u32 = 4294967295;
    pub const TMC2240_X_ENC_SHIFT: u32 = 0;
    pub const TMC2240_ENC_CONST_MASK: u32 = 4294967295;
    pub const TMC2240_ENC_CONST_SHIFT: u32 = 0;
    pub const TMC2240_N_EVENT_MASK: u32 = 1;
    pub const TMC2240_N_EVENT_SHIFT: u32 = 0;
    pub const TMC2240_DEVIATION_WARN_MASK: u32 = 2;
    pub const TMC2240_DEVIATION_WARN_SHIFT: u32 = 1;
    pub const TMC2240_ENC_LATCH_MASK: u32 = 4294967295;
    pub const TMC2240_ENC_LATCH_SHIFT: u32 = 0;
    pub const TMC2240_ADC_VSUPPLY_MASK: u32 = 8191;
    pub const TMC2240_ADC_VSUPPLY_SHIFT: u32 = 0;
    pub const TMC2240_ADC_AIN_MASK: u32 = 536805376;
    pub const TMC2240_ADC_AIN_SHIFT: u32 = 16;
    pub const TMC2240_ADC_TEMP_MASK: u32 = 8191;
    pub const TMC2240_ADC_TEMP_SHIFT: u32 = 0;
    pub const TMC2240_OVERVOLTAGE_VTH_MASK: u32 = 8191;
    pub const TMC2240_OVERVOLTAGE_VTH_SHIFT: u32 = 0;
    pub const TMC2240_OVERTEMPPREWARNING_VTH_MASK: u32 = 536805376;
    pub const TMC2240_OVERTEMPPREWARNING_VTH_SHIFT: u32 = 16;
    pub const TMC2240_MSLUT_0_MASK: u32 = 4294967295;
    pub const TMC2240_MSLUT_0_SHIFT: u32 = 0;
    pub const TMC2240_MSLUT_1_MASK: u32 = 4294967295;
    pub const TMC2240_MSLUT_1_SHIFT: u32 = 0;
    pub const TMC2240_MSLUT_2_MASK: u32 = 4294967295;
    pub const TMC2240_MSLUT_2_SHIFT: u32 = 0;
    pub const TMC2240_MSLUT_3_MASK: u32 = 4294967295;
    pub const TMC2240_MSLUT_3_SHIFT: u32 = 0;
    pub const TMC2240_MSLUT_4_MASK: u32 = 4294967295;
    pub const TMC2240_MSLUT_4_SHIFT: u32 = 0;
    pub const TMC2240_MSLUT_5_MASK: u32 = 4294967295;
    pub const TMC2240_MSLUT_5_SHIFT: u32 = 0;
    pub const TMC2240_MSLUT_6_MASK: u32 = 4294967295;
    pub const TMC2240_MSLUT_6_SHIFT: u32 = 0;
    pub const TMC2240_MSLUT_7_MASK: u32 = 4294967295;
    pub const TMC2240_MSLUT_7_SHIFT: u32 = 0;
    pub const TMC2240_W0_MASK: u32 = 3;
    pub const TMC2240_W0_SHIFT: u32 = 0;
    pub const TMC2240_W1_MASK: u32 = 12;
    pub const TMC2240_W1_SHIFT: u32 = 2;
    pub const TMC2240_W2_MASK: u32 = 48;
    pub const TMC2240_W2_SHIFT: u32 = 4;
    pub const TMC2240_W3_MASK: u32 = 192;
    pub const TMC2240_W3_SHIFT: u32 = 6;
    pub const TMC2240_X1_MASK: u32 = 65280;
    pub const TMC2240_X1_SHIFT: u32 = 8;
    pub const TMC2240_X2_MASK: u32 = 16711680;
    pub const TMC2240_X2_SHIFT: u32 = 16;
    pub const TMC2240_X3_MASK: u32 = 4278190080;
    pub const TMC2240_X3_SHIFT: u32 = 24;
    pub const TMC2240_START_SIN_MASK: u32 = 255;
    pub const TMC2240_START_SIN_SHIFT: u32 = 0;
    pub const TMC2240_START_SIN90_MASK: u32 = 16711680;
    pub const TMC2240_START_SIN90_SHIFT: u32 = 16;
    pub const TMC2240_OFFSET_SIN90_MASK: u32 = 4278190080;
    pub const TMC2240_OFFSET_SIN90_SHIFT: u32 = 24;
    pub const TMC2240_MSCNT_MASK: u32 = 1023;
    pub const TMC2240_MSCNT_SHIFT: u32 = 0;
    pub const TMC2240_CUR_B_MASK: u32 = 511;
    pub const TMC2240_CUR_B_SHIFT: u32 = 0;
    pub const TMC2240_CUR_A_MASK: u32 = 33488896;
    pub const TMC2240_CUR_A_SHIFT: u32 = 16;
    pub const TMC2240_TOFF_MASK: u32 = 15;
    pub const TMC2240_TOFF_SHIFT: u32 = 0;
    pub const TMC2240_HSTRT_TFD210_MASK: u32 = 112;
    pub const TMC2240_HSTRT_TFD210_SHIFT: u32 = 4;
    pub const TMC2240_HEND_OFFSET_MASK: u32 = 1920;
    pub const TMC2240_HEND_OFFSET_SHIFT: u32 = 7;
    pub const TMC2240_FD3_MASK: u32 = 2048;
    pub const TMC2240_FD3_SHIFT: u32 = 11;
    pub const TMC2240_DISFDCC_MASK: u32 = 4096;
    pub const TMC2240_DISFDCC_SHIFT: u32 = 12;
    pub const TMC2240_CHM_MASK: u32 = 16384;
    pub const TMC2240_CHM_SHIFT: u32 = 14;
    pub const TMC2240_TBL_MASK: u32 = 98304;
    pub const TMC2240_TBL_SHIFT: u32 = 15;
    pub const TMC2240_VHIGHFS_MASK: u32 = 262144;
    pub const TMC2240_VHIGHFS_SHIFT: u32 = 18;
    pub const TMC2240_VHIGHCHM_MASK: u32 = 524288;
    pub const TMC2240_VHIGHCHM_SHIFT: u32 = 19;
    pub const TMC2240_TPFD_MASK: u32 = 15728640;
    pub const TMC2240_TPFD_SHIFT: u32 = 20;
    pub const TMC2240_MRES_MASK: u32 = 251658240;
    pub const TMC2240_MRES_SHIFT: u32 = 24;
    pub const TMC2240_INTPOL_MASK: u32 = 268435456;
    pub const TMC2240_INTPOL_SHIFT: u32 = 28;
    pub const TMC2240_DEDGE_MASK: u32 = 536870912;
    pub const TMC2240_DEDGE_SHIFT: u32 = 29;
    pub const TMC2240_DISS2G_MASK: u32 = 1073741824;
    pub const TMC2240_DISS2G_SHIFT: u32 = 30;
    pub const TMC2240_DISS2VS_MASK: u32 = 2147483648;
    pub const TMC2240_DISS2VS_SHIFT: u32 = 31;
    pub const TMC2240_SEMIN_MASK: u32 = 15;
    pub const TMC2240_SEMIN_SHIFT: u32 = 0;
    pub const TMC2240_SEUP_MASK: u32 = 96;
    pub const TMC2240_SEUP_SHIFT: u32 = 5;
    pub const TMC2240_SEMAX_MASK: u32 = 3840;
    pub const TMC2240_SEMAX_SHIFT: u32 = 8;
    pub const TMC2240_SEDN_MASK: u32 = 24576;
    pub const TMC2240_SEDN_SHIFT: u32 = 13;
    pub const TMC2240_SEIMIN_MASK: u32 = 32768;
    pub const TMC2240_SEIMIN_SHIFT: u32 = 15;
    pub const TMC2240_SGT_MASK: u32 = 8323072;
    pub const TMC2240_SGT_SHIFT: u32 = 16;
    pub const TMC2240_SFILT_MASK: u32 = 16777216;
    pub const TMC2240_SFILT_SHIFT: u32 = 24;
    pub const TMC2240_DC_TIME_MASK: u32 = 1023;
    pub const TMC2240_DC_TIME_SHIFT: u32 = 0;
    pub const TMC2240_DC_SG_MASK: u32 = 16711680;
    pub const TMC2240_DC_SG_SHIFT: u32 = 16;
    pub const TMC2240_SG_RESULT_MASK: u32 = 1023;
    pub const TMC2240_SG_RESULT_SHIFT: u32 = 0;
    pub const TMC2240_S2VSA_MASK: u32 = 4096;
    pub const TMC2240_S2VSA_SHIFT: u32 = 12;
    pub const TMC2240_S2VSB_MASK: u32 = 8192;
    pub const TMC2240_S2VSB_SHIFT: u32 = 13;
    pub const TMC2240_STEALTH_MASK: u32 = 16384;
    pub const TMC2240_STEALTH_SHIFT: u32 = 14;
    pub const TMC2240_FSACTIVE_MASK: u32 = 32768;
    pub const TMC2240_FSACTIVE_SHIFT: u32 = 15;
    pub const TMC2240_CS_ACTUAL_MASK: u32 = 2031616;
    pub const TMC2240_CS_ACTUAL_SHIFT: u32 = 16;
    pub const TMC2240_STALLGUARD_MASK: u32 = 16777216;
    pub const TMC2240_STALLGUARD_SHIFT: u32 = 24;
    pub const TMC2240_OT_MASK: u32 = 33554432;
    pub const TMC2240_OT_SHIFT: u32 = 25;
    pub const TMC2240_OTPW_MASK: u32 = 67108864;
    pub const TMC2240_OTPW_SHIFT: u32 = 26;
    pub const TMC2240_S2GA_MASK: u32 = 134217728;
    pub const TMC2240_S2GA_SHIFT: u32 = 27;
    pub const TMC2240_S2GB_MASK: u32 = 268435456;
    pub const TMC2240_S2GB_SHIFT: u32 = 28;
    pub const TMC2240_OLA_MASK: u32 = 536870912;
    pub const TMC2240_OLA_SHIFT: u32 = 29;
    pub const TMC2240_OLB_MASK: u32 = 1073741824;
    pub const TMC2240_OLB_SHIFT: u32 = 30;
    pub const TMC2240_STST_MASK: u32 = 2147483648;
    pub const TMC2240_STST_SHIFT: u32 = 31;
    pub const TMC2240_PWM_OFS_MASK: u32 = 255;
    pub const TMC2240_PWM_OFS_SHIFT: u32 = 0;
    pub const TMC2240_PWM_GRAD_MASK: u32 = 65280;
    pub const TMC2240_PWM_GRAD_SHIFT: u32 = 8;
    pub const TMC2240_PWM_FREQ_MASK: u32 = 196608;
    pub const TMC2240_PWM_FREQ_SHIFT: u32 = 16;
    pub const TMC2240_PWM_AUTOSCALE_MASK: u32 = 262144;
    pub const TMC2240_PWM_AUTOSCALE_SHIFT: u32 = 18;
    pub const TMC2240_PWM_AUTOGRAD_MASK: u32 = 524288;
    pub const TMC2240_PWM_AUTOGRAD_SHIFT: u32 = 19;
    pub const TMC2240_FREEWHEEL_MASK: u32 = 3145728;
    pub const TMC2240_FREEWHEEL_SHIFT: u32 = 20;
    pub const TMC2240_PWM_MEAS_SD_ENABLE_MASK: u32 = 4194304;
    pub const TMC2240_PWM_MEAS_SD_ENABLE_SHIFT: u32 = 22;
    pub const TMC2240_PWM_DIS_REG_STST_MASK: u32 = 8388608;
    pub const TMC2240_PWM_DIS_REG_STST_SHIFT: u32 = 23;
    pub const TMC2240_PWM_REG_MASK: u32 = 251658240;
    pub const TMC2240_PWM_REG_SHIFT: u32 = 24;
    pub const TMC2240_PWM_LIM_MASK: u32 = 4026531840;
    pub const TMC2240_PWM_LIM_SHIFT: u32 = 28;
    pub const TMC2240_PWM_SCALE_SUM_MASK: u32 = 1023;
    pub const TMC2240_PWM_SCALE_SUM_SHIFT: u32 = 0;
    pub const TMC2240_PWM_SCALE_AUTO_MASK: u32 = 33488896;
    pub const TMC2240_PWM_SCALE_AUTO_SHIFT: u32 = 16;
    pub const TMC2240_PWM_OFS_AUTO_MASK: u32 = 255;
    pub const TMC2240_PWM_OFS_AUTO_SHIFT: u32 = 0;
    pub const TMC2240_PWM_GRAD_AUTO_MASK: u32 = 16711680;
    pub const TMC2240_PWM_GRAD_AUTO_SHIFT: u32 = 16;
    pub const TMC2240_SG4_THRS_MASK: u32 = 255;
    pub const TMC2240_SG4_THRS_SHIFT: u32 = 0;
    pub const TMC2240_SG4_FILT_EN_MASK: u32 = 256;
    pub const TMC2240_SG4_FILT_EN_SHIFT: u32 = 8;
    pub const TMC2240_SG_ANGLE_OFFSET_MASK: u32 = 512;
    pub const TMC2240_SG_ANGLE_OFFSET_SHIFT: u32 = 9;
    pub const TMC2240_SG4_RESULT_MASK: u32 = 1023;
    pub const TMC2240_SG4_RESULT_SHIFT: u32 = 0;
    pub const TMC2240_SG4_IND_0_MASK: u32 = 255;
    pub const TMC2240_SG4_IND_0_SHIFT: u32 = 0;
    pub const TMC2240_SG4_IND_1_MASK: u32 = 65280;
    pub const TMC2240_SG4_IND_1_SHIFT: u32 = 8;
    pub const TMC2240_SG4_IND_2_MASK: u32 = 16711680;
    pub const TMC2240_SG4_IND_2_SHIFT: u32 = 16;
    pub const TMC2240_SG4_IND_3_MASK: u32 = 4278190080;
    pub const TMC2240_SG4_IND_3_SHIFT: u32 = 24;
    pub const R00: u32 = 8456;
    pub const R0A: u32 = 32;
    pub const R10: u32 = 461315;
    pub const R11: u32 = 10;
    pub const R2B: u32 = 1;
    pub const R3A: u32 = 65536;
    pub const R52: u32 = 194121509;
    pub const R60: u32 = 2863314260;
    pub const R61: u32 = 1251300522;
    pub const R62: u32 = 608774441;
    pub const R63: u32 = 269500962;
    pub const R64: u32 = 4227858431;
    pub const R65: u32 = 3048961917;
    pub const R66: u32 = 1227445590;
    pub const R67: u32 = 4211234;
    pub const R68: u32 = 4294934614;
    pub const R69: u32 = 16187392;
    pub const R6C: u32 = 4260179;
    pub const R70: u32 = 3293315102;
    pub const TMC_RAMP_LINEAR_DEFAULT_HOMING_DISTANCE: u32 = 5;
    pub const TMC_RAMP_LINEAR_DEFAULT_STOP_VELOCITY: u32 = 5;
    pub type wchar_t = cty::c_int;
    #[repr(C)]
    #[repr(align(16))]
    #[derive(Debug, Copy, Clone)]
    pub struct max_align_t {
        pub __clang_max_align_nonce1: cty::c_longlong,
        pub __bindgen_padding_0: u64,
        pub __clang_max_align_nonce2: u128,
    }
    #[test]
    fn bindgen_test_layout_max_align_t() {
        const UNINIT: ::core::mem::MaybeUninit<max_align_t> = ::core::mem::MaybeUninit::uninit();
        let ptr = UNINIT.as_ptr();
        assert_eq!(
            ::core::mem::size_of::<max_align_t>(),
            32usize,
            concat!("Size of: ", stringify!(max_align_t))
        );
        assert_eq!(
            ::core::mem::align_of::<max_align_t>(),
            16usize,
            concat!("Alignment of ", stringify!(max_align_t))
        );
        assert_eq!(
            unsafe {
                ::core::ptr::addr_of!((*ptr).__clang_max_align_nonce1) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(max_align_t),
                "::",
                stringify!(__clang_max_align_nonce1)
            )
        );
        assert_eq!(
            unsafe {
                ::core::ptr::addr_of!((*ptr).__clang_max_align_nonce2) as usize - ptr as usize
            },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(max_align_t),
                "::",
                stringify!(__clang_max_align_nonce2)
            )
        );
    }
    pub type __u_char = cty::c_uchar;
    pub type __u_short = cty::c_ushort;
    pub type __u_int = cty::c_uint;
    pub type __u_long = cty::c_ulong;
    pub type __int8_t = cty::c_schar;
    pub type __uint8_t = cty::c_uchar;
    pub type __int16_t = cty::c_short;
    pub type __uint16_t = cty::c_ushort;
    pub type __int32_t = cty::c_int;
    pub type __uint32_t = cty::c_uint;
    pub type __int64_t = cty::c_long;
    pub type __uint64_t = cty::c_ulong;
    pub type __int_least8_t = root::__int8_t;
    pub type __uint_least8_t = root::__uint8_t;
    pub type __int_least16_t = root::__int16_t;
    pub type __uint_least16_t = root::__uint16_t;
    pub type __int_least32_t = root::__int32_t;
    pub type __uint_least32_t = root::__uint32_t;
    pub type __int_least64_t = root::__int64_t;
    pub type __uint_least64_t = root::__uint64_t;
    pub type __quad_t = cty::c_long;
    pub type __u_quad_t = cty::c_ulong;
    pub type __intmax_t = cty::c_long;
    pub type __uintmax_t = cty::c_ulong;
    pub type __dev_t = cty::c_ulong;
    pub type __uid_t = cty::c_uint;
    pub type __gid_t = cty::c_uint;
    pub type __ino_t = cty::c_ulong;
    pub type __ino64_t = cty::c_ulong;
    pub type __mode_t = cty::c_uint;
    pub type __nlink_t = cty::c_ulong;
    pub type __off_t = cty::c_long;
    pub type __off64_t = cty::c_long;
    pub type __pid_t = cty::c_int;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct __fsid_t {
        pub __val: [cty::c_int; 2usize],
    }
    #[test]
    fn bindgen_test_layout___fsid_t() {
        const UNINIT: ::core::mem::MaybeUninit<__fsid_t> = ::core::mem::MaybeUninit::uninit();
        let ptr = UNINIT.as_ptr();
        assert_eq!(
            ::core::mem::size_of::<__fsid_t>(),
            8usize,
            concat!("Size of: ", stringify!(__fsid_t))
        );
        assert_eq!(
            ::core::mem::align_of::<__fsid_t>(),
            4usize,
            concat!("Alignment of ", stringify!(__fsid_t))
        );
        assert_eq!(
            unsafe { ::core::ptr::addr_of!((*ptr).__val) as usize - ptr as usize },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__fsid_t),
                "::",
                stringify!(__val)
            )
        );
    }
    pub type __clock_t = cty::c_long;
    pub type __rlim_t = cty::c_ulong;
    pub type __rlim64_t = cty::c_ulong;
    pub type __id_t = cty::c_uint;
    pub type __time_t = cty::c_long;
    pub type __useconds_t = cty::c_uint;
    pub type __suseconds_t = cty::c_long;
    pub type __suseconds64_t = cty::c_long;
    pub type __daddr_t = cty::c_int;
    pub type __key_t = cty::c_int;
    pub type __clockid_t = cty::c_int;
    pub type __timer_t = *mut cty::c_void;
    pub type __blksize_t = cty::c_long;
    pub type __blkcnt_t = cty::c_long;
    pub type __blkcnt64_t = cty::c_long;
    pub type __fsblkcnt_t = cty::c_ulong;
    pub type __fsblkcnt64_t = cty::c_ulong;
    pub type __fsfilcnt_t = cty::c_ulong;
    pub type __fsfilcnt64_t = cty::c_ulong;
    pub type __fsword_t = cty::c_long;
    pub type __ssize_t = cty::c_long;
    pub type __syscall_slong_t = cty::c_long;
    pub type __syscall_ulong_t = cty::c_ulong;
    pub type __loff_t = root::__off64_t;
    pub type __caddr_t = *mut cty::c_char;
    pub type __intptr_t = cty::c_long;
    pub type __socklen_t = cty::c_uint;
    pub type __sig_atomic_t = cty::c_int;
    pub type int_least8_t = root::__int_least8_t;
    pub type int_least16_t = root::__int_least16_t;
    pub type int_least32_t = root::__int_least32_t;
    pub type int_least64_t = root::__int_least64_t;
    pub type uint_least8_t = root::__uint_least8_t;
    pub type uint_least16_t = root::__uint_least16_t;
    pub type uint_least32_t = root::__uint_least32_t;
    pub type uint_least64_t = root::__uint_least64_t;
    pub type int_fast8_t = cty::c_schar;
    pub type int_fast16_t = cty::c_long;
    pub type int_fast32_t = cty::c_long;
    pub type int_fast64_t = cty::c_long;
    pub type uint_fast8_t = cty::c_uchar;
    pub type uint_fast16_t = cty::c_ulong;
    pub type uint_fast32_t = cty::c_ulong;
    pub type uint_fast64_t = cty::c_ulong;
    pub type intmax_t = root::__intmax_t;
    pub type uintmax_t = root::__uintmax_t;
    pub type float32_t = f32;
    pub type float64_t = f64;
    pub type tmc_callback_config = ::core::option::Option<unsafe extern "C" fn()>;
    pub const ConfigState_CONFIG_READY: root::ConfigState = 0;
    pub const ConfigState_CONFIG_RESET: root::ConfigState = 1;
    pub const ConfigState_CONFIG_RESTORE: root::ConfigState = 2;
    pub type ConfigState = cty::c_uint;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct ConfigurationTypeDef {
        pub state: root::ConfigState,
        pub configIndex: u8,
        pub shadowRegister: [i32; 128usize],
        pub reset: ::core::option::Option<unsafe extern "C" fn() -> u8>,
        pub restore: ::core::option::Option<unsafe extern "C" fn() -> u8>,
        pub callback: root::tmc_callback_config,
        pub channel: u8,
    }
    #[test]
    fn bindgen_test_layout_ConfigurationTypeDef() {
        const UNINIT: ::core::mem::MaybeUninit<ConfigurationTypeDef> =
            ::core::mem::MaybeUninit::uninit();
        let ptr = UNINIT.as_ptr();
        assert_eq!(
            ::core::mem::size_of::<ConfigurationTypeDef>(),
            552usize,
            concat!("Size of: ", stringify!(ConfigurationTypeDef))
        );
        assert_eq!(
            ::core::mem::align_of::<ConfigurationTypeDef>(),
            8usize,
            concat!("Alignment of ", stringify!(ConfigurationTypeDef))
        );
        assert_eq!(
            unsafe { ::core::ptr::addr_of!((*ptr).state) as usize - ptr as usize },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(ConfigurationTypeDef),
                "::",
                stringify!(state)
            )
        );
        assert_eq!(
            unsafe { ::core::ptr::addr_of!((*ptr).configIndex) as usize - ptr as usize },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(ConfigurationTypeDef),
                "::",
                stringify!(configIndex)
            )
        );
        assert_eq!(
            unsafe { ::core::ptr::addr_of!((*ptr).shadowRegister) as usize - ptr as usize },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(ConfigurationTypeDef),
                "::",
                stringify!(shadowRegister)
            )
        );
        assert_eq!(
            unsafe { ::core::ptr::addr_of!((*ptr).reset) as usize - ptr as usize },
            520usize,
            concat!(
                "Offset of field: ",
                stringify!(ConfigurationTypeDef),
                "::",
                stringify!(reset)
            )
        );
        assert_eq!(
            unsafe { ::core::ptr::addr_of!((*ptr).restore) as usize - ptr as usize },
            528usize,
            concat!(
                "Offset of field: ",
                stringify!(ConfigurationTypeDef),
                "::",
                stringify!(restore)
            )
        );
        assert_eq!(
            unsafe { ::core::ptr::addr_of!((*ptr).callback) as usize - ptr as usize },
            536usize,
            concat!(
                "Offset of field: ",
                stringify!(ConfigurationTypeDef),
                "::",
                stringify!(callback)
            )
        );
        assert_eq!(
            unsafe { ::core::ptr::addr_of!((*ptr).channel) as usize - ptr as usize },
            544usize,
            concat!(
                "Offset of field: ",
                stringify!(ConfigurationTypeDef),
                "::",
                stringify!(channel)
            )
        );
    }
    extern "C" {
        pub fn tmc_fillCRC8Table(polynomial: u8, isReflected: bool, index: u8) -> u8;
    }
    extern "C" {
        pub fn tmc_CRC8(data: *mut u8, bytes: u32, index: u8) -> u8;
    }
    extern "C" {
        pub fn tmc_tableGetPolynomial(index: u8) -> u8;
    }
    extern "C" {
        pub fn tmc_tableIsReflected(index: u8) -> bool;
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct TMCRegisterConstant {
        pub address: u8,
        pub value: u32,
    }
    #[test]
    fn bindgen_test_layout_TMCRegisterConstant() {
        const UNINIT: ::core::mem::MaybeUninit<TMCRegisterConstant> =
            ::core::mem::MaybeUninit::uninit();
        let ptr = UNINIT.as_ptr();
        assert_eq!(
            ::core::mem::size_of::<TMCRegisterConstant>(),
            8usize,
            concat!("Size of: ", stringify!(TMCRegisterConstant))
        );
        assert_eq!(
            ::core::mem::align_of::<TMCRegisterConstant>(),
            4usize,
            concat!("Alignment of ", stringify!(TMCRegisterConstant))
        );
        assert_eq!(
            unsafe { ::core::ptr::addr_of!((*ptr).address) as usize - ptr as usize },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(TMCRegisterConstant),
                "::",
                stringify!(address)
            )
        );
        assert_eq!(
            unsafe { ::core::ptr::addr_of!((*ptr).value) as usize - ptr as usize },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(TMCRegisterConstant),
                "::",
                stringify!(value)
            )
        );
    }
    pub type _Float32 = f32;
    pub type _Float64 = f64;
    pub type _Float32x = f64;
    pub type _Float64x = u128;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct div_t {
        pub quot: cty::c_int,
        pub rem: cty::c_int,
    }
    #[test]
    fn bindgen_test_layout_div_t() {
        const UNINIT: ::core::mem::MaybeUninit<div_t> = ::core::mem::MaybeUninit::uninit();
        let ptr = UNINIT.as_ptr();
        assert_eq!(
            ::core::mem::size_of::<div_t>(),
            8usize,
            concat!("Size of: ", stringify!(div_t))
        );
        assert_eq!(
            ::core::mem::align_of::<div_t>(),
            4usize,
            concat!("Alignment of ", stringify!(div_t))
        );
        assert_eq!(
            unsafe { ::core::ptr::addr_of!((*ptr).quot) as usize - ptr as usize },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(div_t),
                "::",
                stringify!(quot)
            )
        );
        assert_eq!(
            unsafe { ::core::ptr::addr_of!((*ptr).rem) as usize - ptr as usize },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(div_t),
                "::",
                stringify!(rem)
            )
        );
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct ldiv_t {
        pub quot: cty::c_long,
        pub rem: cty::c_long,
    }
    #[test]
    fn bindgen_test_layout_ldiv_t() {
        const UNINIT: ::core::mem::MaybeUninit<ldiv_t> = ::core::mem::MaybeUninit::uninit();
        let ptr = UNINIT.as_ptr();
        assert_eq!(
            ::core::mem::size_of::<ldiv_t>(),
            16usize,
            concat!("Size of: ", stringify!(ldiv_t))
        );
        assert_eq!(
            ::core::mem::align_of::<ldiv_t>(),
            8usize,
            concat!("Alignment of ", stringify!(ldiv_t))
        );
        assert_eq!(
            unsafe { ::core::ptr::addr_of!((*ptr).quot) as usize - ptr as usize },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(ldiv_t),
                "::",
                stringify!(quot)
            )
        );
        assert_eq!(
            unsafe { ::core::ptr::addr_of!((*ptr).rem) as usize - ptr as usize },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(ldiv_t),
                "::",
                stringify!(rem)
            )
        );
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct lldiv_t {
        pub quot: cty::c_longlong,
        pub rem: cty::c_longlong,
    }
    #[test]
    fn bindgen_test_layout_lldiv_t() {
        const UNINIT: ::core::mem::MaybeUninit<lldiv_t> = ::core::mem::MaybeUninit::uninit();
        let ptr = UNINIT.as_ptr();
        assert_eq!(
            ::core::mem::size_of::<lldiv_t>(),
            16usize,
            concat!("Size of: ", stringify!(lldiv_t))
        );
        assert_eq!(
            ::core::mem::align_of::<lldiv_t>(),
            8usize,
            concat!("Alignment of ", stringify!(lldiv_t))
        );
        assert_eq!(
            unsafe { ::core::ptr::addr_of!((*ptr).quot) as usize - ptr as usize },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(lldiv_t),
                "::",
                stringify!(quot)
            )
        );
        assert_eq!(
            unsafe { ::core::ptr::addr_of!((*ptr).rem) as usize - ptr as usize },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(lldiv_t),
                "::",
                stringify!(rem)
            )
        );
    }
    extern "C" {
        pub fn __ctype_get_mb_cur_max() -> usize;
    }
    extern "C" {
        pub fn atof(__nptr: *const cty::c_char) -> f64;
    }
    extern "C" {
        pub fn atoi(__nptr: *const cty::c_char) -> cty::c_int;
    }
    extern "C" {
        pub fn atol(__nptr: *const cty::c_char) -> cty::c_long;
    }
    extern "C" {
        pub fn atoll(__nptr: *const cty::c_char) -> cty::c_longlong;
    }
    extern "C" {
        pub fn strtod(__nptr: *const cty::c_char, __endptr: *mut *mut cty::c_char) -> f64;
    }
    extern "C" {
        pub fn strtof(__nptr: *const cty::c_char, __endptr: *mut *mut cty::c_char) -> f32;
    }
    extern "C" {
        pub fn strtold(__nptr: *const cty::c_char, __endptr: *mut *mut cty::c_char) -> u128;
    }
    extern "C" {
        pub fn strtol(
            __nptr: *const cty::c_char,
            __endptr: *mut *mut cty::c_char,
            __base: cty::c_int,
        ) -> cty::c_long;
    }
    extern "C" {
        pub fn strtoul(
            __nptr: *const cty::c_char,
            __endptr: *mut *mut cty::c_char,
            __base: cty::c_int,
        ) -> cty::c_ulong;
    }
    extern "C" {
        pub fn strtoq(
            __nptr: *const cty::c_char,
            __endptr: *mut *mut cty::c_char,
            __base: cty::c_int,
        ) -> cty::c_longlong;
    }
    extern "C" {
        pub fn strtouq(
            __nptr: *const cty::c_char,
            __endptr: *mut *mut cty::c_char,
            __base: cty::c_int,
        ) -> cty::c_ulonglong;
    }
    extern "C" {
        pub fn strtoll(
            __nptr: *const cty::c_char,
            __endptr: *mut *mut cty::c_char,
            __base: cty::c_int,
        ) -> cty::c_longlong;
    }
    extern "C" {
        pub fn strtoull(
            __nptr: *const cty::c_char,
            __endptr: *mut *mut cty::c_char,
            __base: cty::c_int,
        ) -> cty::c_ulonglong;
    }
    extern "C" {
        pub fn l64a(__n: cty::c_long) -> *mut cty::c_char;
    }
    extern "C" {
        pub fn a64l(__s: *const cty::c_char) -> cty::c_long;
    }
    pub type u_char = root::__u_char;
    pub type u_short = root::__u_short;
    pub type u_int = root::__u_int;
    pub type u_long = root::__u_long;
    pub type quad_t = root::__quad_t;
    pub type u_quad_t = root::__u_quad_t;
    pub type fsid_t = root::__fsid_t;
    pub type loff_t = root::__loff_t;
    pub type ino_t = root::__ino_t;
    pub type dev_t = root::__dev_t;
    pub type gid_t = root::__gid_t;
    pub type mode_t = root::__mode_t;
    pub type nlink_t = root::__nlink_t;
    pub type uid_t = root::__uid_t;
    pub type off_t = root::__off_t;
    pub type pid_t = root::__pid_t;
    pub type id_t = root::__id_t;
    pub type daddr_t = root::__daddr_t;
    pub type caddr_t = root::__caddr_t;
    pub type key_t = root::__key_t;
    pub type clock_t = root::__clock_t;
    pub type clockid_t = root::__clockid_t;
    pub type time_t = root::__time_t;
    pub type timer_t = root::__timer_t;
    pub type ulong = cty::c_ulong;
    pub type ushort = cty::c_ushort;
    pub type uint = cty::c_uint;
    pub type u_int8_t = root::__uint8_t;
    pub type u_int16_t = root::__uint16_t;
    pub type u_int32_t = root::__uint32_t;
    pub type u_int64_t = root::__uint64_t;
    pub type register_t = cty::c_long;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct __sigset_t {
        pub __val: [cty::c_ulong; 16usize],
    }
    #[test]
    fn bindgen_test_layout___sigset_t() {
        const UNINIT: ::core::mem::MaybeUninit<__sigset_t> = ::core::mem::MaybeUninit::uninit();
        let ptr = UNINIT.as_ptr();
        assert_eq!(
            ::core::mem::size_of::<__sigset_t>(),
            128usize,
            concat!("Size of: ", stringify!(__sigset_t))
        );
        assert_eq!(
            ::core::mem::align_of::<__sigset_t>(),
            8usize,
            concat!("Alignment of ", stringify!(__sigset_t))
        );
        assert_eq!(
            unsafe { ::core::ptr::addr_of!((*ptr).__val) as usize - ptr as usize },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__sigset_t),
                "::",
                stringify!(__val)
            )
        );
    }
    pub type sigset_t = root::__sigset_t;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct timeval {
        pub tv_sec: root::__time_t,
        pub tv_usec: root::__suseconds_t,
    }
    #[test]
    fn bindgen_test_layout_timeval() {
        const UNINIT: ::core::mem::MaybeUninit<timeval> = ::core::mem::MaybeUninit::uninit();
        let ptr = UNINIT.as_ptr();
        assert_eq!(
            ::core::mem::size_of::<timeval>(),
            16usize,
            concat!("Size of: ", stringify!(timeval))
        );
        assert_eq!(
            ::core::mem::align_of::<timeval>(),
            8usize,
            concat!("Alignment of ", stringify!(timeval))
        );
        assert_eq!(
            unsafe { ::core::ptr::addr_of!((*ptr).tv_sec) as usize - ptr as usize },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(timeval),
                "::",
                stringify!(tv_sec)
            )
        );
        assert_eq!(
            unsafe { ::core::ptr::addr_of!((*ptr).tv_usec) as usize - ptr as usize },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(timeval),
                "::",
                stringify!(tv_usec)
            )
        );
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct timespec {
        pub tv_sec: root::__time_t,
        pub tv_nsec: root::__syscall_slong_t,
    }
    #[test]
    fn bindgen_test_layout_timespec() {
        const UNINIT: ::core::mem::MaybeUninit<timespec> = ::core::mem::MaybeUninit::uninit();
        let ptr = UNINIT.as_ptr();
        assert_eq!(
            ::core::mem::size_of::<timespec>(),
            16usize,
            concat!("Size of: ", stringify!(timespec))
        );
        assert_eq!(
            ::core::mem::align_of::<timespec>(),
            8usize,
            concat!("Alignment of ", stringify!(timespec))
        );
        assert_eq!(
            unsafe { ::core::ptr::addr_of!((*ptr).tv_sec) as usize - ptr as usize },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(timespec),
                "::",
                stringify!(tv_sec)
            )
        );
        assert_eq!(
            unsafe { ::core::ptr::addr_of!((*ptr).tv_nsec) as usize - ptr as usize },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(timespec),
                "::",
                stringify!(tv_nsec)
            )
        );
    }
    pub type suseconds_t = root::__suseconds_t;
    pub type __fd_mask = cty::c_long;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct fd_set {
        pub __fds_bits: [root::__fd_mask; 16usize],
    }
    #[test]
    fn bindgen_test_layout_fd_set() {
        const UNINIT: ::core::mem::MaybeUninit<fd_set> = ::core::mem::MaybeUninit::uninit();
        let ptr = UNINIT.as_ptr();
        assert_eq!(
            ::core::mem::size_of::<fd_set>(),
            128usize,
            concat!("Size of: ", stringify!(fd_set))
        );
        assert_eq!(
            ::core::mem::align_of::<fd_set>(),
            8usize,
            concat!("Alignment of ", stringify!(fd_set))
        );
        assert_eq!(
            unsafe { ::core::ptr::addr_of!((*ptr).__fds_bits) as usize - ptr as usize },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(fd_set),
                "::",
                stringify!(__fds_bits)
            )
        );
    }
    pub type fd_mask = root::__fd_mask;
    extern "C" {
        pub fn select(
            __nfds: cty::c_int,
            __readfds: *mut root::fd_set,
            __writefds: *mut root::fd_set,
            __exceptfds: *mut root::fd_set,
            __timeout: *mut root::timeval,
        ) -> cty::c_int;
    }
    extern "C" {
        pub fn pselect(
            __nfds: cty::c_int,
            __readfds: *mut root::fd_set,
            __writefds: *mut root::fd_set,
            __exceptfds: *mut root::fd_set,
            __timeout: *const root::timespec,
            __sigmask: *const root::__sigset_t,
        ) -> cty::c_int;
    }
    pub type blksize_t = root::__blksize_t;
    pub type blkcnt_t = root::__blkcnt_t;
    pub type fsblkcnt_t = root::__fsblkcnt_t;
    pub type fsfilcnt_t = root::__fsfilcnt_t;
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub union __atomic_wide_counter {
        pub __value64: cty::c_ulonglong,
        pub __value32: root::__atomic_wide_counter__bindgen_ty_1,
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct __atomic_wide_counter__bindgen_ty_1 {
        pub __low: cty::c_uint,
        pub __high: cty::c_uint,
    }
    #[test]
    fn bindgen_test_layout___atomic_wide_counter__bindgen_ty_1() {
        const UNINIT: ::core::mem::MaybeUninit<__atomic_wide_counter__bindgen_ty_1> =
            ::core::mem::MaybeUninit::uninit();
        let ptr = UNINIT.as_ptr();
        assert_eq!(
            ::core::mem::size_of::<__atomic_wide_counter__bindgen_ty_1>(),
            8usize,
            concat!("Size of: ", stringify!(__atomic_wide_counter__bindgen_ty_1))
        );
        assert_eq!(
            ::core::mem::align_of::<__atomic_wide_counter__bindgen_ty_1>(),
            4usize,
            concat!(
                "Alignment of ",
                stringify!(__atomic_wide_counter__bindgen_ty_1)
            )
        );
        assert_eq!(
            unsafe { ::core::ptr::addr_of!((*ptr).__low) as usize - ptr as usize },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__atomic_wide_counter__bindgen_ty_1),
                "::",
                stringify!(__low)
            )
        );
        assert_eq!(
            unsafe { ::core::ptr::addr_of!((*ptr).__high) as usize - ptr as usize },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(__atomic_wide_counter__bindgen_ty_1),
                "::",
                stringify!(__high)
            )
        );
    }
    #[test]
    fn bindgen_test_layout___atomic_wide_counter() {
        const UNINIT: ::core::mem::MaybeUninit<__atomic_wide_counter> =
            ::core::mem::MaybeUninit::uninit();
        let ptr = UNINIT.as_ptr();
        assert_eq!(
            ::core::mem::size_of::<__atomic_wide_counter>(),
            8usize,
            concat!("Size of: ", stringify!(__atomic_wide_counter))
        );
        assert_eq!(
            ::core::mem::align_of::<__atomic_wide_counter>(),
            8usize,
            concat!("Alignment of ", stringify!(__atomic_wide_counter))
        );
        assert_eq!(
            unsafe { ::core::ptr::addr_of!((*ptr).__value64) as usize - ptr as usize },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__atomic_wide_counter),
                "::",
                stringify!(__value64)
            )
        );
        assert_eq!(
            unsafe { ::core::ptr::addr_of!((*ptr).__value32) as usize - ptr as usize },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__atomic_wide_counter),
                "::",
                stringify!(__value32)
            )
        );
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct __pthread_internal_list {
        pub __prev: *mut root::__pthread_internal_list,
        pub __next: *mut root::__pthread_internal_list,
    }
    #[test]
    fn bindgen_test_layout___pthread_internal_list() {
        const UNINIT: ::core::mem::MaybeUninit<__pthread_internal_list> =
            ::core::mem::MaybeUninit::uninit();
        let ptr = UNINIT.as_ptr();
        assert_eq!(
            ::core::mem::size_of::<__pthread_internal_list>(),
            16usize,
            concat!("Size of: ", stringify!(__pthread_internal_list))
        );
        assert_eq!(
            ::core::mem::align_of::<__pthread_internal_list>(),
            8usize,
            concat!("Alignment of ", stringify!(__pthread_internal_list))
        );
        assert_eq!(
            unsafe { ::core::ptr::addr_of!((*ptr).__prev) as usize - ptr as usize },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__pthread_internal_list),
                "::",
                stringify!(__prev)
            )
        );
        assert_eq!(
            unsafe { ::core::ptr::addr_of!((*ptr).__next) as usize - ptr as usize },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(__pthread_internal_list),
                "::",
                stringify!(__next)
            )
        );
    }
    pub type __pthread_list_t = root::__pthread_internal_list;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct __pthread_internal_slist {
        pub __next: *mut root::__pthread_internal_slist,
    }
    #[test]
    fn bindgen_test_layout___pthread_internal_slist() {
        const UNINIT: ::core::mem::MaybeUninit<__pthread_internal_slist> =
            ::core::mem::MaybeUninit::uninit();
        let ptr = UNINIT.as_ptr();
        assert_eq!(
            ::core::mem::size_of::<__pthread_internal_slist>(),
            8usize,
            concat!("Size of: ", stringify!(__pthread_internal_slist))
        );
        assert_eq!(
            ::core::mem::align_of::<__pthread_internal_slist>(),
            8usize,
            concat!("Alignment of ", stringify!(__pthread_internal_slist))
        );
        assert_eq!(
            unsafe { ::core::ptr::addr_of!((*ptr).__next) as usize - ptr as usize },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__pthread_internal_slist),
                "::",
                stringify!(__next)
            )
        );
    }
    pub type __pthread_slist_t = root::__pthread_internal_slist;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct __pthread_mutex_s {
        pub __lock: cty::c_int,
        pub __count: cty::c_uint,
        pub __owner: cty::c_int,
        pub __nusers: cty::c_uint,
        pub __kind: cty::c_int,
        pub __spins: cty::c_short,
        pub __elision: cty::c_short,
        pub __list: root::__pthread_list_t,
    }
    #[test]
    fn bindgen_test_layout___pthread_mutex_s() {
        const UNINIT: ::core::mem::MaybeUninit<__pthread_mutex_s> =
            ::core::mem::MaybeUninit::uninit();
        let ptr = UNINIT.as_ptr();
        assert_eq!(
            ::core::mem::size_of::<__pthread_mutex_s>(),
            40usize,
            concat!("Size of: ", stringify!(__pthread_mutex_s))
        );
        assert_eq!(
            ::core::mem::align_of::<__pthread_mutex_s>(),
            8usize,
            concat!("Alignment of ", stringify!(__pthread_mutex_s))
        );
        assert_eq!(
            unsafe { ::core::ptr::addr_of!((*ptr).__lock) as usize - ptr as usize },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__pthread_mutex_s),
                "::",
                stringify!(__lock)
            )
        );
        assert_eq!(
            unsafe { ::core::ptr::addr_of!((*ptr).__count) as usize - ptr as usize },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(__pthread_mutex_s),
                "::",
                stringify!(__count)
            )
        );
        assert_eq!(
            unsafe { ::core::ptr::addr_of!((*ptr).__owner) as usize - ptr as usize },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(__pthread_mutex_s),
                "::",
                stringify!(__owner)
            )
        );
        assert_eq!(
            unsafe { ::core::ptr::addr_of!((*ptr).__nusers) as usize - ptr as usize },
            12usize,
            concat!(
                "Offset of field: ",
                stringify!(__pthread_mutex_s),
                "::",
                stringify!(__nusers)
            )
        );
        assert_eq!(
            unsafe { ::core::ptr::addr_of!((*ptr).__kind) as usize - ptr as usize },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(__pthread_mutex_s),
                "::",
                stringify!(__kind)
            )
        );
        assert_eq!(
            unsafe { ::core::ptr::addr_of!((*ptr).__spins) as usize - ptr as usize },
            20usize,
            concat!(
                "Offset of field: ",
                stringify!(__pthread_mutex_s),
                "::",
                stringify!(__spins)
            )
        );
        assert_eq!(
            unsafe { ::core::ptr::addr_of!((*ptr).__elision) as usize - ptr as usize },
            22usize,
            concat!(
                "Offset of field: ",
                stringify!(__pthread_mutex_s),
                "::",
                stringify!(__elision)
            )
        );
        assert_eq!(
            unsafe { ::core::ptr::addr_of!((*ptr).__list) as usize - ptr as usize },
            24usize,
            concat!(
                "Offset of field: ",
                stringify!(__pthread_mutex_s),
                "::",
                stringify!(__list)
            )
        );
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct __pthread_rwlock_arch_t {
        pub __readers: cty::c_uint,
        pub __writers: cty::c_uint,
        pub __wrphase_futex: cty::c_uint,
        pub __writers_futex: cty::c_uint,
        pub __pad3: cty::c_uint,
        pub __pad4: cty::c_uint,
        pub __cur_writer: cty::c_int,
        pub __shared: cty::c_int,
        pub __rwelision: cty::c_schar,
        pub __pad1: [cty::c_uchar; 7usize],
        pub __pad2: cty::c_ulong,
        pub __flags: cty::c_uint,
    }
    #[test]
    fn bindgen_test_layout___pthread_rwlock_arch_t() {
        const UNINIT: ::core::mem::MaybeUninit<__pthread_rwlock_arch_t> =
            ::core::mem::MaybeUninit::uninit();
        let ptr = UNINIT.as_ptr();
        assert_eq!(
            ::core::mem::size_of::<__pthread_rwlock_arch_t>(),
            56usize,
            concat!("Size of: ", stringify!(__pthread_rwlock_arch_t))
        );
        assert_eq!(
            ::core::mem::align_of::<__pthread_rwlock_arch_t>(),
            8usize,
            concat!("Alignment of ", stringify!(__pthread_rwlock_arch_t))
        );
        assert_eq!(
            unsafe { ::core::ptr::addr_of!((*ptr).__readers) as usize - ptr as usize },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__pthread_rwlock_arch_t),
                "::",
                stringify!(__readers)
            )
        );
        assert_eq!(
            unsafe { ::core::ptr::addr_of!((*ptr).__writers) as usize - ptr as usize },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(__pthread_rwlock_arch_t),
                "::",
                stringify!(__writers)
            )
        );
        assert_eq!(
            unsafe { ::core::ptr::addr_of!((*ptr).__wrphase_futex) as usize - ptr as usize },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(__pthread_rwlock_arch_t),
                "::",
                stringify!(__wrphase_futex)
            )
        );
        assert_eq!(
            unsafe { ::core::ptr::addr_of!((*ptr).__writers_futex) as usize - ptr as usize },
            12usize,
            concat!(
                "Offset of field: ",
                stringify!(__pthread_rwlock_arch_t),
                "::",
                stringify!(__writers_futex)
            )
        );
        assert_eq!(
            unsafe { ::core::ptr::addr_of!((*ptr).__pad3) as usize - ptr as usize },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(__pthread_rwlock_arch_t),
                "::",
                stringify!(__pad3)
            )
        );
        assert_eq!(
            unsafe { ::core::ptr::addr_of!((*ptr).__pad4) as usize - ptr as usize },
            20usize,
            concat!(
                "Offset of field: ",
                stringify!(__pthread_rwlock_arch_t),
                "::",
                stringify!(__pad4)
            )
        );
        assert_eq!(
            unsafe { ::core::ptr::addr_of!((*ptr).__cur_writer) as usize - ptr as usize },
            24usize,
            concat!(
                "Offset of field: ",
                stringify!(__pthread_rwlock_arch_t),
                "::",
                stringify!(__cur_writer)
            )
        );
        assert_eq!(
            unsafe { ::core::ptr::addr_of!((*ptr).__shared) as usize - ptr as usize },
            28usize,
            concat!(
                "Offset of field: ",
                stringify!(__pthread_rwlock_arch_t),
                "::",
                stringify!(__shared)
            )
        );
        assert_eq!(
            unsafe { ::core::ptr::addr_of!((*ptr).__rwelision) as usize - ptr as usize },
            32usize,
            concat!(
                "Offset of field: ",
                stringify!(__pthread_rwlock_arch_t),
                "::",
                stringify!(__rwelision)
            )
        );
        assert_eq!(
            unsafe { ::core::ptr::addr_of!((*ptr).__pad1) as usize - ptr as usize },
            33usize,
            concat!(
                "Offset of field: ",
                stringify!(__pthread_rwlock_arch_t),
                "::",
                stringify!(__pad1)
            )
        );
        assert_eq!(
            unsafe { ::core::ptr::addr_of!((*ptr).__pad2) as usize - ptr as usize },
            40usize,
            concat!(
                "Offset of field: ",
                stringify!(__pthread_rwlock_arch_t),
                "::",
                stringify!(__pad2)
            )
        );
        assert_eq!(
            unsafe { ::core::ptr::addr_of!((*ptr).__flags) as usize - ptr as usize },
            48usize,
            concat!(
                "Offset of field: ",
                stringify!(__pthread_rwlock_arch_t),
                "::",
                stringify!(__flags)
            )
        );
    }
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub struct __pthread_cond_s {
        pub __wseq: root::__atomic_wide_counter,
        pub __g1_start: root::__atomic_wide_counter,
        pub __g_refs: [cty::c_uint; 2usize],
        pub __g_size: [cty::c_uint; 2usize],
        pub __g1_orig_size: cty::c_uint,
        pub __wrefs: cty::c_uint,
        pub __g_signals: [cty::c_uint; 2usize],
    }
    #[test]
    fn bindgen_test_layout___pthread_cond_s() {
        const UNINIT: ::core::mem::MaybeUninit<__pthread_cond_s> =
            ::core::mem::MaybeUninit::uninit();
        let ptr = UNINIT.as_ptr();
        assert_eq!(
            ::core::mem::size_of::<__pthread_cond_s>(),
            48usize,
            concat!("Size of: ", stringify!(__pthread_cond_s))
        );
        assert_eq!(
            ::core::mem::align_of::<__pthread_cond_s>(),
            8usize,
            concat!("Alignment of ", stringify!(__pthread_cond_s))
        );
        assert_eq!(
            unsafe { ::core::ptr::addr_of!((*ptr).__wseq) as usize - ptr as usize },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__pthread_cond_s),
                "::",
                stringify!(__wseq)
            )
        );
        assert_eq!(
            unsafe { ::core::ptr::addr_of!((*ptr).__g1_start) as usize - ptr as usize },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(__pthread_cond_s),
                "::",
                stringify!(__g1_start)
            )
        );
        assert_eq!(
            unsafe { ::core::ptr::addr_of!((*ptr).__g_refs) as usize - ptr as usize },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(__pthread_cond_s),
                "::",
                stringify!(__g_refs)
            )
        );
        assert_eq!(
            unsafe { ::core::ptr::addr_of!((*ptr).__g_size) as usize - ptr as usize },
            24usize,
            concat!(
                "Offset of field: ",
                stringify!(__pthread_cond_s),
                "::",
                stringify!(__g_size)
            )
        );
        assert_eq!(
            unsafe { ::core::ptr::addr_of!((*ptr).__g1_orig_size) as usize - ptr as usize },
            32usize,
            concat!(
                "Offset of field: ",
                stringify!(__pthread_cond_s),
                "::",
                stringify!(__g1_orig_size)
            )
        );
        assert_eq!(
            unsafe { ::core::ptr::addr_of!((*ptr).__wrefs) as usize - ptr as usize },
            36usize,
            concat!(
                "Offset of field: ",
                stringify!(__pthread_cond_s),
                "::",
                stringify!(__wrefs)
            )
        );
        assert_eq!(
            unsafe { ::core::ptr::addr_of!((*ptr).__g_signals) as usize - ptr as usize },
            40usize,
            concat!(
                "Offset of field: ",
                stringify!(__pthread_cond_s),
                "::",
                stringify!(__g_signals)
            )
        );
    }
    pub type __tss_t = cty::c_uint;
    pub type __thrd_t = cty::c_ulong;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct __once_flag {
        pub __data: cty::c_int,
    }
    #[test]
    fn bindgen_test_layout___once_flag() {
        const UNINIT: ::core::mem::MaybeUninit<__once_flag> = ::core::mem::MaybeUninit::uninit();
        let ptr = UNINIT.as_ptr();
        assert_eq!(
            ::core::mem::size_of::<__once_flag>(),
            4usize,
            concat!("Size of: ", stringify!(__once_flag))
        );
        assert_eq!(
            ::core::mem::align_of::<__once_flag>(),
            4usize,
            concat!("Alignment of ", stringify!(__once_flag))
        );
        assert_eq!(
            unsafe { ::core::ptr::addr_of!((*ptr).__data) as usize - ptr as usize },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__once_flag),
                "::",
                stringify!(__data)
            )
        );
    }
    pub type pthread_t = cty::c_ulong;
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub union pthread_mutexattr_t {
        pub __size: [cty::c_char; 4usize],
        pub __align: cty::c_int,
    }
    #[test]
    fn bindgen_test_layout_pthread_mutexattr_t() {
        const UNINIT: ::core::mem::MaybeUninit<pthread_mutexattr_t> =
            ::core::mem::MaybeUninit::uninit();
        let ptr = UNINIT.as_ptr();
        assert_eq!(
            ::core::mem::size_of::<pthread_mutexattr_t>(),
            4usize,
            concat!("Size of: ", stringify!(pthread_mutexattr_t))
        );
        assert_eq!(
            ::core::mem::align_of::<pthread_mutexattr_t>(),
            4usize,
            concat!("Alignment of ", stringify!(pthread_mutexattr_t))
        );
        assert_eq!(
            unsafe { ::core::ptr::addr_of!((*ptr).__size) as usize - ptr as usize },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(pthread_mutexattr_t),
                "::",
                stringify!(__size)
            )
        );
        assert_eq!(
            unsafe { ::core::ptr::addr_of!((*ptr).__align) as usize - ptr as usize },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(pthread_mutexattr_t),
                "::",
                stringify!(__align)
            )
        );
    }
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub union pthread_condattr_t {
        pub __size: [cty::c_char; 4usize],
        pub __align: cty::c_int,
    }
    #[test]
    fn bindgen_test_layout_pthread_condattr_t() {
        const UNINIT: ::core::mem::MaybeUninit<pthread_condattr_t> =
            ::core::mem::MaybeUninit::uninit();
        let ptr = UNINIT.as_ptr();
        assert_eq!(
            ::core::mem::size_of::<pthread_condattr_t>(),
            4usize,
            concat!("Size of: ", stringify!(pthread_condattr_t))
        );
        assert_eq!(
            ::core::mem::align_of::<pthread_condattr_t>(),
            4usize,
            concat!("Alignment of ", stringify!(pthread_condattr_t))
        );
        assert_eq!(
            unsafe { ::core::ptr::addr_of!((*ptr).__size) as usize - ptr as usize },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(pthread_condattr_t),
                "::",
                stringify!(__size)
            )
        );
        assert_eq!(
            unsafe { ::core::ptr::addr_of!((*ptr).__align) as usize - ptr as usize },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(pthread_condattr_t),
                "::",
                stringify!(__align)
            )
        );
    }
    pub type pthread_key_t = cty::c_uint;
    pub type pthread_once_t = cty::c_int;
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub union pthread_attr_t {
        pub __size: [cty::c_char; 56usize],
        pub __align: cty::c_long,
    }
    #[test]
    fn bindgen_test_layout_pthread_attr_t() {
        const UNINIT: ::core::mem::MaybeUninit<pthread_attr_t> = ::core::mem::MaybeUninit::uninit();
        let ptr = UNINIT.as_ptr();
        assert_eq!(
            ::core::mem::size_of::<pthread_attr_t>(),
            56usize,
            concat!("Size of: ", stringify!(pthread_attr_t))
        );
        assert_eq!(
            ::core::mem::align_of::<pthread_attr_t>(),
            8usize,
            concat!("Alignment of ", stringify!(pthread_attr_t))
        );
        assert_eq!(
            unsafe { ::core::ptr::addr_of!((*ptr).__size) as usize - ptr as usize },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(pthread_attr_t),
                "::",
                stringify!(__size)
            )
        );
        assert_eq!(
            unsafe { ::core::ptr::addr_of!((*ptr).__align) as usize - ptr as usize },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(pthread_attr_t),
                "::",
                stringify!(__align)
            )
        );
    }
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub union pthread_mutex_t {
        pub __data: root::__pthread_mutex_s,
        pub __size: [cty::c_char; 40usize],
        pub __align: cty::c_long,
    }
    #[test]
    fn bindgen_test_layout_pthread_mutex_t() {
        const UNINIT: ::core::mem::MaybeUninit<pthread_mutex_t> =
            ::core::mem::MaybeUninit::uninit();
        let ptr = UNINIT.as_ptr();
        assert_eq!(
            ::core::mem::size_of::<pthread_mutex_t>(),
            40usize,
            concat!("Size of: ", stringify!(pthread_mutex_t))
        );
        assert_eq!(
            ::core::mem::align_of::<pthread_mutex_t>(),
            8usize,
            concat!("Alignment of ", stringify!(pthread_mutex_t))
        );
        assert_eq!(
            unsafe { ::core::ptr::addr_of!((*ptr).__data) as usize - ptr as usize },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(pthread_mutex_t),
                "::",
                stringify!(__data)
            )
        );
        assert_eq!(
            unsafe { ::core::ptr::addr_of!((*ptr).__size) as usize - ptr as usize },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(pthread_mutex_t),
                "::",
                stringify!(__size)
            )
        );
        assert_eq!(
            unsafe { ::core::ptr::addr_of!((*ptr).__align) as usize - ptr as usize },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(pthread_mutex_t),
                "::",
                stringify!(__align)
            )
        );
    }
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub union pthread_cond_t {
        pub __data: root::__pthread_cond_s,
        pub __size: [cty::c_char; 48usize],
        pub __align: cty::c_longlong,
    }
    #[test]
    fn bindgen_test_layout_pthread_cond_t() {
        const UNINIT: ::core::mem::MaybeUninit<pthread_cond_t> = ::core::mem::MaybeUninit::uninit();
        let ptr = UNINIT.as_ptr();
        assert_eq!(
            ::core::mem::size_of::<pthread_cond_t>(),
            48usize,
            concat!("Size of: ", stringify!(pthread_cond_t))
        );
        assert_eq!(
            ::core::mem::align_of::<pthread_cond_t>(),
            8usize,
            concat!("Alignment of ", stringify!(pthread_cond_t))
        );
        assert_eq!(
            unsafe { ::core::ptr::addr_of!((*ptr).__data) as usize - ptr as usize },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(pthread_cond_t),
                "::",
                stringify!(__data)
            )
        );
        assert_eq!(
            unsafe { ::core::ptr::addr_of!((*ptr).__size) as usize - ptr as usize },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(pthread_cond_t),
                "::",
                stringify!(__size)
            )
        );
        assert_eq!(
            unsafe { ::core::ptr::addr_of!((*ptr).__align) as usize - ptr as usize },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(pthread_cond_t),
                "::",
                stringify!(__align)
            )
        );
    }
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub union pthread_rwlock_t {
        pub __data: root::__pthread_rwlock_arch_t,
        pub __size: [cty::c_char; 56usize],
        pub __align: cty::c_long,
    }
    #[test]
    fn bindgen_test_layout_pthread_rwlock_t() {
        const UNINIT: ::core::mem::MaybeUninit<pthread_rwlock_t> =
            ::core::mem::MaybeUninit::uninit();
        let ptr = UNINIT.as_ptr();
        assert_eq!(
            ::core::mem::size_of::<pthread_rwlock_t>(),
            56usize,
            concat!("Size of: ", stringify!(pthread_rwlock_t))
        );
        assert_eq!(
            ::core::mem::align_of::<pthread_rwlock_t>(),
            8usize,
            concat!("Alignment of ", stringify!(pthread_rwlock_t))
        );
        assert_eq!(
            unsafe { ::core::ptr::addr_of!((*ptr).__data) as usize - ptr as usize },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(pthread_rwlock_t),
                "::",
                stringify!(__data)
            )
        );
        assert_eq!(
            unsafe { ::core::ptr::addr_of!((*ptr).__size) as usize - ptr as usize },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(pthread_rwlock_t),
                "::",
                stringify!(__size)
            )
        );
        assert_eq!(
            unsafe { ::core::ptr::addr_of!((*ptr).__align) as usize - ptr as usize },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(pthread_rwlock_t),
                "::",
                stringify!(__align)
            )
        );
    }
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub union pthread_rwlockattr_t {
        pub __size: [cty::c_char; 8usize],
        pub __align: cty::c_long,
    }
    #[test]
    fn bindgen_test_layout_pthread_rwlockattr_t() {
        const UNINIT: ::core::mem::MaybeUninit<pthread_rwlockattr_t> =
            ::core::mem::MaybeUninit::uninit();
        let ptr = UNINIT.as_ptr();
        assert_eq!(
            ::core::mem::size_of::<pthread_rwlockattr_t>(),
            8usize,
            concat!("Size of: ", stringify!(pthread_rwlockattr_t))
        );
        assert_eq!(
            ::core::mem::align_of::<pthread_rwlockattr_t>(),
            8usize,
            concat!("Alignment of ", stringify!(pthread_rwlockattr_t))
        );
        assert_eq!(
            unsafe { ::core::ptr::addr_of!((*ptr).__size) as usize - ptr as usize },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(pthread_rwlockattr_t),
                "::",
                stringify!(__size)
            )
        );
        assert_eq!(
            unsafe { ::core::ptr::addr_of!((*ptr).__align) as usize - ptr as usize },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(pthread_rwlockattr_t),
                "::",
                stringify!(__align)
            )
        );
    }
    pub type pthread_spinlock_t = cty::c_int;
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub union pthread_barrier_t {
        pub __size: [cty::c_char; 32usize],
        pub __align: cty::c_long,
    }
    #[test]
    fn bindgen_test_layout_pthread_barrier_t() {
        const UNINIT: ::core::mem::MaybeUninit<pthread_barrier_t> =
            ::core::mem::MaybeUninit::uninit();
        let ptr = UNINIT.as_ptr();
        assert_eq!(
            ::core::mem::size_of::<pthread_barrier_t>(),
            32usize,
            concat!("Size of: ", stringify!(pthread_barrier_t))
        );
        assert_eq!(
            ::core::mem::align_of::<pthread_barrier_t>(),
            8usize,
            concat!("Alignment of ", stringify!(pthread_barrier_t))
        );
        assert_eq!(
            unsafe { ::core::ptr::addr_of!((*ptr).__size) as usize - ptr as usize },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(pthread_barrier_t),
                "::",
                stringify!(__size)
            )
        );
        assert_eq!(
            unsafe { ::core::ptr::addr_of!((*ptr).__align) as usize - ptr as usize },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(pthread_barrier_t),
                "::",
                stringify!(__align)
            )
        );
    }
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub union pthread_barrierattr_t {
        pub __size: [cty::c_char; 4usize],
        pub __align: cty::c_int,
    }
    #[test]
    fn bindgen_test_layout_pthread_barrierattr_t() {
        const UNINIT: ::core::mem::MaybeUninit<pthread_barrierattr_t> =
            ::core::mem::MaybeUninit::uninit();
        let ptr = UNINIT.as_ptr();
        assert_eq!(
            ::core::mem::size_of::<pthread_barrierattr_t>(),
            4usize,
            concat!("Size of: ", stringify!(pthread_barrierattr_t))
        );
        assert_eq!(
            ::core::mem::align_of::<pthread_barrierattr_t>(),
            4usize,
            concat!("Alignment of ", stringify!(pthread_barrierattr_t))
        );
        assert_eq!(
            unsafe { ::core::ptr::addr_of!((*ptr).__size) as usize - ptr as usize },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(pthread_barrierattr_t),
                "::",
                stringify!(__size)
            )
        );
        assert_eq!(
            unsafe { ::core::ptr::addr_of!((*ptr).__align) as usize - ptr as usize },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(pthread_barrierattr_t),
                "::",
                stringify!(__align)
            )
        );
    }
    extern "C" {
        pub fn random() -> cty::c_long;
    }
    extern "C" {
        pub fn srandom(__seed: cty::c_uint);
    }
    extern "C" {
        pub fn initstate(
            __seed: cty::c_uint,
            __statebuf: *mut cty::c_char,
            __statelen: usize,
        ) -> *mut cty::c_char;
    }
    extern "C" {
        pub fn setstate(__statebuf: *mut cty::c_char) -> *mut cty::c_char;
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct random_data {
        pub fptr: *mut i32,
        pub rptr: *mut i32,
        pub state: *mut i32,
        pub rand_type: cty::c_int,
        pub rand_deg: cty::c_int,
        pub rand_sep: cty::c_int,
        pub end_ptr: *mut i32,
    }
    #[test]
    fn bindgen_test_layout_random_data() {
        const UNINIT: ::core::mem::MaybeUninit<random_data> = ::core::mem::MaybeUninit::uninit();
        let ptr = UNINIT.as_ptr();
        assert_eq!(
            ::core::mem::size_of::<random_data>(),
            48usize,
            concat!("Size of: ", stringify!(random_data))
        );
        assert_eq!(
            ::core::mem::align_of::<random_data>(),
            8usize,
            concat!("Alignment of ", stringify!(random_data))
        );
        assert_eq!(
            unsafe { ::core::ptr::addr_of!((*ptr).fptr) as usize - ptr as usize },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(random_data),
                "::",
                stringify!(fptr)
            )
        );
        assert_eq!(
            unsafe { ::core::ptr::addr_of!((*ptr).rptr) as usize - ptr as usize },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(random_data),
                "::",
                stringify!(rptr)
            )
        );
        assert_eq!(
            unsafe { ::core::ptr::addr_of!((*ptr).state) as usize - ptr as usize },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(random_data),
                "::",
                stringify!(state)
            )
        );
        assert_eq!(
            unsafe { ::core::ptr::addr_of!((*ptr).rand_type) as usize - ptr as usize },
            24usize,
            concat!(
                "Offset of field: ",
                stringify!(random_data),
                "::",
                stringify!(rand_type)
            )
        );
        assert_eq!(
            unsafe { ::core::ptr::addr_of!((*ptr).rand_deg) as usize - ptr as usize },
            28usize,
            concat!(
                "Offset of field: ",
                stringify!(random_data),
                "::",
                stringify!(rand_deg)
            )
        );
        assert_eq!(
            unsafe { ::core::ptr::addr_of!((*ptr).rand_sep) as usize - ptr as usize },
            32usize,
            concat!(
                "Offset of field: ",
                stringify!(random_data),
                "::",
                stringify!(rand_sep)
            )
        );
        assert_eq!(
            unsafe { ::core::ptr::addr_of!((*ptr).end_ptr) as usize - ptr as usize },
            40usize,
            concat!(
                "Offset of field: ",
                stringify!(random_data),
                "::",
                stringify!(end_ptr)
            )
        );
    }
    extern "C" {
        pub fn random_r(__buf: *mut root::random_data, __result: *mut i32) -> cty::c_int;
    }
    extern "C" {
        pub fn srandom_r(__seed: cty::c_uint, __buf: *mut root::random_data) -> cty::c_int;
    }
    extern "C" {
        pub fn initstate_r(
            __seed: cty::c_uint,
            __statebuf: *mut cty::c_char,
            __statelen: usize,
            __buf: *mut root::random_data,
        ) -> cty::c_int;
    }
    extern "C" {
        pub fn setstate_r(
            __statebuf: *mut cty::c_char,
            __buf: *mut root::random_data,
        ) -> cty::c_int;
    }
    extern "C" {
        pub fn rand() -> cty::c_int;
    }
    extern "C" {
        pub fn srand(__seed: cty::c_uint);
    }
    extern "C" {
        pub fn rand_r(__seed: *mut cty::c_uint) -> cty::c_int;
    }
    extern "C" {
        pub fn drand48() -> f64;
    }
    extern "C" {
        pub fn erand48(__xsubi: *mut cty::c_ushort) -> f64;
    }
    extern "C" {
        pub fn lrand48() -> cty::c_long;
    }
    extern "C" {
        pub fn nrand48(__xsubi: *mut cty::c_ushort) -> cty::c_long;
    }
    extern "C" {
        pub fn mrand48() -> cty::c_long;
    }
    extern "C" {
        pub fn jrand48(__xsubi: *mut cty::c_ushort) -> cty::c_long;
    }
    extern "C" {
        pub fn srand48(__seedval: cty::c_long);
    }
    extern "C" {
        pub fn seed48(__seed16v: *mut cty::c_ushort) -> *mut cty::c_ushort;
    }
    extern "C" {
        pub fn lcong48(__param: *mut cty::c_ushort);
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct drand48_data {
        pub __x: [cty::c_ushort; 3usize],
        pub __old_x: [cty::c_ushort; 3usize],
        pub __c: cty::c_ushort,
        pub __init: cty::c_ushort,
        pub __a: cty::c_ulonglong,
    }
    #[test]
    fn bindgen_test_layout_drand48_data() {
        const UNINIT: ::core::mem::MaybeUninit<drand48_data> = ::core::mem::MaybeUninit::uninit();
        let ptr = UNINIT.as_ptr();
        assert_eq!(
            ::core::mem::size_of::<drand48_data>(),
            24usize,
            concat!("Size of: ", stringify!(drand48_data))
        );
        assert_eq!(
            ::core::mem::align_of::<drand48_data>(),
            8usize,
            concat!("Alignment of ", stringify!(drand48_data))
        );
        assert_eq!(
            unsafe { ::core::ptr::addr_of!((*ptr).__x) as usize - ptr as usize },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(drand48_data),
                "::",
                stringify!(__x)
            )
        );
        assert_eq!(
            unsafe { ::core::ptr::addr_of!((*ptr).__old_x) as usize - ptr as usize },
            6usize,
            concat!(
                "Offset of field: ",
                stringify!(drand48_data),
                "::",
                stringify!(__old_x)
            )
        );
        assert_eq!(
            unsafe { ::core::ptr::addr_of!((*ptr).__c) as usize - ptr as usize },
            12usize,
            concat!(
                "Offset of field: ",
                stringify!(drand48_data),
                "::",
                stringify!(__c)
            )
        );
        assert_eq!(
            unsafe { ::core::ptr::addr_of!((*ptr).__init) as usize - ptr as usize },
            14usize,
            concat!(
                "Offset of field: ",
                stringify!(drand48_data),
                "::",
                stringify!(__init)
            )
        );
        assert_eq!(
            unsafe { ::core::ptr::addr_of!((*ptr).__a) as usize - ptr as usize },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(drand48_data),
                "::",
                stringify!(__a)
            )
        );
    }
    extern "C" {
        pub fn drand48_r(__buffer: *mut root::drand48_data, __result: *mut f64) -> cty::c_int;
    }
    extern "C" {
        pub fn erand48_r(
            __xsubi: *mut cty::c_ushort,
            __buffer: *mut root::drand48_data,
            __result: *mut f64,
        ) -> cty::c_int;
    }
    extern "C" {
        pub fn lrand48_r(
            __buffer: *mut root::drand48_data,
            __result: *mut cty::c_long,
        ) -> cty::c_int;
    }
    extern "C" {
        pub fn nrand48_r(
            __xsubi: *mut cty::c_ushort,
            __buffer: *mut root::drand48_data,
            __result: *mut cty::c_long,
        ) -> cty::c_int;
    }
    extern "C" {
        pub fn mrand48_r(
            __buffer: *mut root::drand48_data,
            __result: *mut cty::c_long,
        ) -> cty::c_int;
    }
    extern "C" {
        pub fn jrand48_r(
            __xsubi: *mut cty::c_ushort,
            __buffer: *mut root::drand48_data,
            __result: *mut cty::c_long,
        ) -> cty::c_int;
    }
    extern "C" {
        pub fn srand48_r(__seedval: cty::c_long, __buffer: *mut root::drand48_data) -> cty::c_int;
    }
    extern "C" {
        pub fn seed48_r(
            __seed16v: *mut cty::c_ushort,
            __buffer: *mut root::drand48_data,
        ) -> cty::c_int;
    }
    extern "C" {
        pub fn lcong48_r(
            __param: *mut cty::c_ushort,
            __buffer: *mut root::drand48_data,
        ) -> cty::c_int;
    }
    extern "C" {
        pub fn arc4random() -> root::__uint32_t;
    }
    extern "C" {
        pub fn arc4random_buf(__buf: *mut cty::c_void, __size: usize);
    }
    extern "C" {
        pub fn arc4random_uniform(__upper_bound: root::__uint32_t) -> root::__uint32_t;
    }
    extern "C" {
        pub fn malloc(__size: cty::c_ulong) -> *mut cty::c_void;
    }
    extern "C" {
        pub fn calloc(__nmemb: cty::c_ulong, __size: cty::c_ulong) -> *mut cty::c_void;
    }
    extern "C" {
        pub fn realloc(__ptr: *mut cty::c_void, __size: cty::c_ulong) -> *mut cty::c_void;
    }
    extern "C" {
        pub fn free(__ptr: *mut cty::c_void);
    }
    extern "C" {
        pub fn reallocarray(
            __ptr: *mut cty::c_void,
            __nmemb: usize,
            __size: usize,
        ) -> *mut cty::c_void;
    }
    extern "C" {
        pub fn alloca(__size: cty::c_ulong) -> *mut cty::c_void;
    }
    extern "C" {
        pub fn valloc(__size: usize) -> *mut cty::c_void;
    }
    extern "C" {
        pub fn posix_memalign(
            __memptr: *mut *mut cty::c_void,
            __alignment: usize,
            __size: usize,
        ) -> cty::c_int;
    }
    extern "C" {
        pub fn aligned_alloc(__alignment: cty::c_ulong, __size: cty::c_ulong) -> *mut cty::c_void;
    }
    extern "C" {
        pub fn abort() -> !;
    }
    extern "C" {
        pub fn atexit(__func: ::core::option::Option<unsafe extern "C" fn()>) -> cty::c_int;
    }
    extern "C" {
        pub fn at_quick_exit(__func: ::core::option::Option<unsafe extern "C" fn()>) -> cty::c_int;
    }
    extern "C" {
        pub fn on_exit(
            __func: ::core::option::Option<
                unsafe extern "C" fn(__status: cty::c_int, __arg: *mut cty::c_void),
            >,
            __arg: *mut cty::c_void,
        ) -> cty::c_int;
    }
    extern "C" {
        pub fn exit(__status: cty::c_int) -> !;
    }
    extern "C" {
        pub fn quick_exit(__status: cty::c_int) -> !;
    }
    extern "C" {
        pub fn _Exit(__status: cty::c_int) -> !;
    }
    extern "C" {
        pub fn getenv(__name: *const cty::c_char) -> *mut cty::c_char;
    }
    extern "C" {
        pub fn putenv(__string: *mut cty::c_char) -> cty::c_int;
    }
    extern "C" {
        pub fn setenv(
            __name: *const cty::c_char,
            __value: *const cty::c_char,
            __replace: cty::c_int,
        ) -> cty::c_int;
    }
    extern "C" {
        pub fn unsetenv(__name: *const cty::c_char) -> cty::c_int;
    }
    extern "C" {
        pub fn clearenv() -> cty::c_int;
    }
    extern "C" {
        pub fn mktemp(__template: *mut cty::c_char) -> *mut cty::c_char;
    }
    extern "C" {
        pub fn mkstemp(__template: *mut cty::c_char) -> cty::c_int;
    }
    extern "C" {
        pub fn mkstemps(__template: *mut cty::c_char, __suffixlen: cty::c_int) -> cty::c_int;
    }
    extern "C" {
        pub fn mkdtemp(__template: *mut cty::c_char) -> *mut cty::c_char;
    }
    extern "C" {
        pub fn system(__command: *const cty::c_char) -> cty::c_int;
    }
    extern "C" {
        pub fn realpath(
            __name: *const cty::c_char,
            __resolved: *mut cty::c_char,
        ) -> *mut cty::c_char;
    }
    pub type __compar_fn_t = ::core::option::Option<
        unsafe extern "C" fn(arg1: *const cty::c_void, arg2: *const cty::c_void) -> cty::c_int,
    >;
    extern "C" {
        pub fn bsearch(
            __key: *const cty::c_void,
            __base: *const cty::c_void,
            __nmemb: usize,
            __size: usize,
            __compar: root::__compar_fn_t,
        ) -> *mut cty::c_void;
    }
    extern "C" {
        pub fn qsort(
            __base: *mut cty::c_void,
            __nmemb: usize,
            __size: usize,
            __compar: root::__compar_fn_t,
        );
    }
    extern "C" {
        pub fn abs(__x: cty::c_int) -> cty::c_int;
    }
    extern "C" {
        pub fn labs(__x: cty::c_long) -> cty::c_long;
    }
    extern "C" {
        pub fn llabs(__x: cty::c_longlong) -> cty::c_longlong;
    }
    extern "C" {
        pub fn div(__numer: cty::c_int, __denom: cty::c_int) -> root::div_t;
    }
    extern "C" {
        pub fn ldiv(__numer: cty::c_long, __denom: cty::c_long) -> root::ldiv_t;
    }
    extern "C" {
        pub fn lldiv(__numer: cty::c_longlong, __denom: cty::c_longlong) -> root::lldiv_t;
    }
    extern "C" {
        pub fn ecvt(
            __value: f64,
            __ndigit: cty::c_int,
            __decpt: *mut cty::c_int,
            __sign: *mut cty::c_int,
        ) -> *mut cty::c_char;
    }
    extern "C" {
        pub fn fcvt(
            __value: f64,
            __ndigit: cty::c_int,
            __decpt: *mut cty::c_int,
            __sign: *mut cty::c_int,
        ) -> *mut cty::c_char;
    }
    extern "C" {
        pub fn gcvt(
            __value: f64,
            __ndigit: cty::c_int,
            __buf: *mut cty::c_char,
        ) -> *mut cty::c_char;
    }
    extern "C" {
        pub fn qecvt(
            __value: u128,
            __ndigit: cty::c_int,
            __decpt: *mut cty::c_int,
            __sign: *mut cty::c_int,
        ) -> *mut cty::c_char;
    }
    extern "C" {
        pub fn qfcvt(
            __value: u128,
            __ndigit: cty::c_int,
            __decpt: *mut cty::c_int,
            __sign: *mut cty::c_int,
        ) -> *mut cty::c_char;
    }
    extern "C" {
        pub fn qgcvt(
            __value: u128,
            __ndigit: cty::c_int,
            __buf: *mut cty::c_char,
        ) -> *mut cty::c_char;
    }
    extern "C" {
        pub fn ecvt_r(
            __value: f64,
            __ndigit: cty::c_int,
            __decpt: *mut cty::c_int,
            __sign: *mut cty::c_int,
            __buf: *mut cty::c_char,
            __len: usize,
        ) -> cty::c_int;
    }
    extern "C" {
        pub fn fcvt_r(
            __value: f64,
            __ndigit: cty::c_int,
            __decpt: *mut cty::c_int,
            __sign: *mut cty::c_int,
            __buf: *mut cty::c_char,
            __len: usize,
        ) -> cty::c_int;
    }
    extern "C" {
        pub fn qecvt_r(
            __value: u128,
            __ndigit: cty::c_int,
            __decpt: *mut cty::c_int,
            __sign: *mut cty::c_int,
            __buf: *mut cty::c_char,
            __len: usize,
        ) -> cty::c_int;
    }
    extern "C" {
        pub fn qfcvt_r(
            __value: u128,
            __ndigit: cty::c_int,
            __decpt: *mut cty::c_int,
            __sign: *mut cty::c_int,
            __buf: *mut cty::c_char,
            __len: usize,
        ) -> cty::c_int;
    }
    extern "C" {
        pub fn mblen(__s: *const cty::c_char, __n: usize) -> cty::c_int;
    }
    extern "C" {
        pub fn mbtowc(__pwc: *mut root::wchar_t, __s: *const cty::c_char, __n: usize)
            -> cty::c_int;
    }
    extern "C" {
        pub fn wctomb(__s: *mut cty::c_char, __wchar: root::wchar_t) -> cty::c_int;
    }
    extern "C" {
        pub fn mbstowcs(__pwcs: *mut root::wchar_t, __s: *const cty::c_char, __n: usize) -> usize;
    }
    extern "C" {
        pub fn wcstombs(__s: *mut cty::c_char, __pwcs: *const root::wchar_t, __n: usize) -> usize;
    }
    extern "C" {
        pub fn rpmatch(__response: *const cty::c_char) -> cty::c_int;
    }
    extern "C" {
        pub fn getsubopt(
            __optionp: *mut *mut cty::c_char,
            __tokens: *const *mut cty::c_char,
            __valuep: *mut *mut cty::c_char,
        ) -> cty::c_int;
    }
    extern "C" {
        pub fn getloadavg(__loadavg: *mut f64, __nelem: cty::c_int) -> cty::c_int;
    }
    pub const TMCError_TMC_ERROR_NONE: root::TMCError = 0;
    pub const TMCError_TMC_ERROR_GENERIC: root::TMCError = 1;
    pub const TMCError_TMC_ERROR_FUNCTION: root::TMCError = 2;
    pub const TMCError_TMC_ERROR_MOTOR: root::TMCError = 8;
    pub const TMCError_TMC_ERROR_VALUE: root::TMCError = 16;
    pub const TMCError_TMC_ERROR_CHIP: root::TMCError = 64;
    pub type TMCError = cty::c_uint;
    pub const TMC_Comm_Mode_TMC_COMM_DEFAULT: root::TMC_Comm_Mode = 0;
    pub const TMC_Comm_Mode_TMC_COMM_SPI: root::TMC_Comm_Mode = 1;
    pub const TMC_Comm_Mode_TMC_COMM_UART: root::TMC_Comm_Mode = 2;
    pub type TMC_Comm_Mode = cty::c_uint;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct TMC2240TypeDef {
        pub config: *mut root::ConfigurationTypeDef,
        pub velocity: i32,
        pub oldX: i32,
        pub oldTick: u32,
        pub registerResetState: [i32; 128usize],
        pub registerAccess: [u8; 128usize],
        pub slaveAddress: u8,
    }
    #[test]
    fn bindgen_test_layout_TMC2240TypeDef() {
        const UNINIT: ::core::mem::MaybeUninit<TMC2240TypeDef> = ::core::mem::MaybeUninit::uninit();
        let ptr = UNINIT.as_ptr();
        assert_eq!(
            ::core::mem::size_of::<TMC2240TypeDef>(),
            664usize,
            concat!("Size of: ", stringify!(TMC2240TypeDef))
        );
        assert_eq!(
            ::core::mem::align_of::<TMC2240TypeDef>(),
            8usize,
            concat!("Alignment of ", stringify!(TMC2240TypeDef))
        );
        assert_eq!(
            unsafe { ::core::ptr::addr_of!((*ptr).config) as usize - ptr as usize },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(TMC2240TypeDef),
                "::",
                stringify!(config)
            )
        );
        assert_eq!(
            unsafe { ::core::ptr::addr_of!((*ptr).velocity) as usize - ptr as usize },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(TMC2240TypeDef),
                "::",
                stringify!(velocity)
            )
        );
        assert_eq!(
            unsafe { ::core::ptr::addr_of!((*ptr).oldX) as usize - ptr as usize },
            12usize,
            concat!(
                "Offset of field: ",
                stringify!(TMC2240TypeDef),
                "::",
                stringify!(oldX)
            )
        );
        assert_eq!(
            unsafe { ::core::ptr::addr_of!((*ptr).oldTick) as usize - ptr as usize },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(TMC2240TypeDef),
                "::",
                stringify!(oldTick)
            )
        );
        assert_eq!(
            unsafe { ::core::ptr::addr_of!((*ptr).registerResetState) as usize - ptr as usize },
            20usize,
            concat!(
                "Offset of field: ",
                stringify!(TMC2240TypeDef),
                "::",
                stringify!(registerResetState)
            )
        );
        assert_eq!(
            unsafe { ::core::ptr::addr_of!((*ptr).registerAccess) as usize - ptr as usize },
            532usize,
            concat!(
                "Offset of field: ",
                stringify!(TMC2240TypeDef),
                "::",
                stringify!(registerAccess)
            )
        );
        assert_eq!(
            unsafe { ::core::ptr::addr_of!((*ptr).slaveAddress) as usize - ptr as usize },
            660usize,
            concat!(
                "Offset of field: ",
                stringify!(TMC2240TypeDef),
                "::",
                stringify!(slaveAddress)
            )
        );
    }
    pub type tmc2240_callback = ::core::option::Option<
        unsafe extern "C" fn(arg1: *mut root::TMC2240TypeDef, arg2: root::ConfigState),
    >;
    extern "C" {
        pub static tmc2240_defaultRegisterResetState: [i32; 128usize];
    }
    extern "C" {
        pub static tmc2240_defaultRegisterAccess: [u8; 128usize];
    }
    extern "C" {
        pub static tmc2240_RegisterConstants: [root::TMCRegisterConstant; 0usize];
    }
    extern "C" {
        pub fn tmc2240_init(
            tmc2240: *mut root::TMC2240TypeDef,
            channel: u8,
            config: *mut root::ConfigurationTypeDef,
            registerResetState: *const i32,
        );
    }
    extern "C" {
        pub fn tmc2240_reset(tmc2240: *mut root::TMC2240TypeDef) -> u8;
    }
    extern "C" {
        pub fn tmc2240_restore(tmc2240: *mut root::TMC2240TypeDef) -> u8;
    }
    extern "C" {
        pub fn tmc2240_getSlaveAddress(tmc2240: *mut root::TMC2240TypeDef) -> u8;
    }
    extern "C" {
        pub fn tmc2240_setSlaveAddress(tmc2240: *mut root::TMC2240TypeDef, slaveAddress: u8);
    }
    extern "C" {
        pub fn tmc2240_setRegisterResetState(
            tmc2240: *mut root::TMC2240TypeDef,
            resetState: *const i32,
        );
    }
    extern "C" {
        pub fn tmc2240_setCallback(
            tmc2240: *mut root::TMC2240TypeDef,
            callback: root::tmc2240_callback,
        );
    }
    extern "C" {
        pub fn tmc2240_periodicJob(tmc2240: *mut root::TMC2240TypeDef, tick: u32);
    }
    extern "C" {
        pub fn tmc2240_consistencyCheck(tmc2240: *mut root::TMC2240TypeDef) -> u8;
    }
    pub const TMC_LinearRamp_Mode_TMC_RAMP_LINEAR_MODE_VELOCITY: root::TMC_LinearRamp_Mode = 0;
    pub const TMC_LinearRamp_Mode_TMC_RAMP_LINEAR_MODE_POSITION: root::TMC_LinearRamp_Mode = 1;
    pub type TMC_LinearRamp_Mode = cty::c_uint;
    pub const TMC_LinearRamp_State_TMC_RAMP_LINEAR_STATE_IDLE: root::TMC_LinearRamp_State = 0;
    pub const TMC_LinearRamp_State_TMC_RAMP_LINEAR_STATE_DRIVING: root::TMC_LinearRamp_State = 1;
    pub const TMC_LinearRamp_State_TMC_RAMP_LINEAR_STATE_BRAKING: root::TMC_LinearRamp_State = 2;
    pub type TMC_LinearRamp_State = cty::c_uint;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct TMC_LinearRamp {
        pub maxVelocity: u32,
        pub targetPosition: i32,
        pub rampPosition: i32,
        pub targetVelocity: i32,
        pub rampVelocity: i32,
        pub acceleration: i32,
        pub rampEnabled: bool,
        pub accumulatorVelocity: i32,
        pub accumulatorPosition: i32,
        pub rampMode: root::TMC_LinearRamp_Mode,
        pub state: root::TMC_LinearRamp_State,
        pub accelerationSteps: i32,
        pub precision: u32,
        pub homingDistance: u32,
        pub stopVelocity: u32,
    }
    #[test]
    fn bindgen_test_layout_TMC_LinearRamp() {
        const UNINIT: ::core::mem::MaybeUninit<TMC_LinearRamp> = ::core::mem::MaybeUninit::uninit();
        let ptr = UNINIT.as_ptr();
        assert_eq!(
            ::core::mem::size_of::<TMC_LinearRamp>(),
            60usize,
            concat!("Size of: ", stringify!(TMC_LinearRamp))
        );
        assert_eq!(
            ::core::mem::align_of::<TMC_LinearRamp>(),
            4usize,
            concat!("Alignment of ", stringify!(TMC_LinearRamp))
        );
        assert_eq!(
            unsafe { ::core::ptr::addr_of!((*ptr).maxVelocity) as usize - ptr as usize },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(TMC_LinearRamp),
                "::",
                stringify!(maxVelocity)
            )
        );
        assert_eq!(
            unsafe { ::core::ptr::addr_of!((*ptr).targetPosition) as usize - ptr as usize },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(TMC_LinearRamp),
                "::",
                stringify!(targetPosition)
            )
        );
        assert_eq!(
            unsafe { ::core::ptr::addr_of!((*ptr).rampPosition) as usize - ptr as usize },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(TMC_LinearRamp),
                "::",
                stringify!(rampPosition)
            )
        );
        assert_eq!(
            unsafe { ::core::ptr::addr_of!((*ptr).targetVelocity) as usize - ptr as usize },
            12usize,
            concat!(
                "Offset of field: ",
                stringify!(TMC_LinearRamp),
                "::",
                stringify!(targetVelocity)
            )
        );
        assert_eq!(
            unsafe { ::core::ptr::addr_of!((*ptr).rampVelocity) as usize - ptr as usize },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(TMC_LinearRamp),
                "::",
                stringify!(rampVelocity)
            )
        );
        assert_eq!(
            unsafe { ::core::ptr::addr_of!((*ptr).acceleration) as usize - ptr as usize },
            20usize,
            concat!(
                "Offset of field: ",
                stringify!(TMC_LinearRamp),
                "::",
                stringify!(acceleration)
            )
        );
        assert_eq!(
            unsafe { ::core::ptr::addr_of!((*ptr).rampEnabled) as usize - ptr as usize },
            24usize,
            concat!(
                "Offset of field: ",
                stringify!(TMC_LinearRamp),
                "::",
                stringify!(rampEnabled)
            )
        );
        assert_eq!(
            unsafe { ::core::ptr::addr_of!((*ptr).accumulatorVelocity) as usize - ptr as usize },
            28usize,
            concat!(
                "Offset of field: ",
                stringify!(TMC_LinearRamp),
                "::",
                stringify!(accumulatorVelocity)
            )
        );
        assert_eq!(
            unsafe { ::core::ptr::addr_of!((*ptr).accumulatorPosition) as usize - ptr as usize },
            32usize,
            concat!(
                "Offset of field: ",
                stringify!(TMC_LinearRamp),
                "::",
                stringify!(accumulatorPosition)
            )
        );
        assert_eq!(
            unsafe { ::core::ptr::addr_of!((*ptr).rampMode) as usize - ptr as usize },
            36usize,
            concat!(
                "Offset of field: ",
                stringify!(TMC_LinearRamp),
                "::",
                stringify!(rampMode)
            )
        );
        assert_eq!(
            unsafe { ::core::ptr::addr_of!((*ptr).state) as usize - ptr as usize },
            40usize,
            concat!(
                "Offset of field: ",
                stringify!(TMC_LinearRamp),
                "::",
                stringify!(state)
            )
        );
        assert_eq!(
            unsafe { ::core::ptr::addr_of!((*ptr).accelerationSteps) as usize - ptr as usize },
            44usize,
            concat!(
                "Offset of field: ",
                stringify!(TMC_LinearRamp),
                "::",
                stringify!(accelerationSteps)
            )
        );
        assert_eq!(
            unsafe { ::core::ptr::addr_of!((*ptr).precision) as usize - ptr as usize },
            48usize,
            concat!(
                "Offset of field: ",
                stringify!(TMC_LinearRamp),
                "::",
                stringify!(precision)
            )
        );
        assert_eq!(
            unsafe { ::core::ptr::addr_of!((*ptr).homingDistance) as usize - ptr as usize },
            52usize,
            concat!(
                "Offset of field: ",
                stringify!(TMC_LinearRamp),
                "::",
                stringify!(homingDistance)
            )
        );
        assert_eq!(
            unsafe { ::core::ptr::addr_of!((*ptr).stopVelocity) as usize - ptr as usize },
            56usize,
            concat!(
                "Offset of field: ",
                stringify!(TMC_LinearRamp),
                "::",
                stringify!(stopVelocity)
            )
        );
    }
    extern "C" {
        pub fn tmc_ramp_linear_init(linearRamp: *mut root::TMC_LinearRamp);
    }
    extern "C" {
        pub fn tmc_ramp_linear_compute(linearRamp: *mut root::TMC_LinearRamp) -> i32;
    }
    extern "C" {
        pub fn tmc_ramp_linear_compute_velocity(linearRamp: *mut root::TMC_LinearRamp) -> i32;
    }
    extern "C" {
        pub fn tmc_ramp_linear_compute_position(linearRamp: *mut root::TMC_LinearRamp);
    }
    extern "C" {
        pub fn tmc_ramp_linear_set_enabled(linearRamp: *mut root::TMC_LinearRamp, enabled: bool);
    }
    extern "C" {
        pub fn tmc_ramp_linear_set_maxVelocity(
            linearRamp: *mut root::TMC_LinearRamp,
            maxVelocity: u32,
        );
    }
    extern "C" {
        pub fn tmc_ramp_linear_set_targetPosition(
            linearRamp: *mut root::TMC_LinearRamp,
            targetPosition: i32,
        );
    }
    extern "C" {
        pub fn tmc_ramp_linear_set_rampPosition(
            linearRamp: *mut root::TMC_LinearRamp,
            rampPosition: i32,
        );
    }
    extern "C" {
        pub fn tmc_ramp_linear_set_targetVelocity(
            linearRamp: *mut root::TMC_LinearRamp,
            targetVelocity: i32,
        );
    }
    extern "C" {
        pub fn tmc_ramp_linear_set_rampVelocity(
            linearRamp: *mut root::TMC_LinearRamp,
            rampVelocity: i32,
        );
    }
    extern "C" {
        pub fn tmc_ramp_linear_set_acceleration(
            linearRamp: *mut root::TMC_LinearRamp,
            acceleration: i32,
        );
    }
    extern "C" {
        pub fn tmc_ramp_linear_set_mode(
            linearRamp: *mut root::TMC_LinearRamp,
            mode: root::TMC_LinearRamp_Mode,
        );
    }
    extern "C" {
        pub fn tmc_ramp_linear_set_precision(linearRamp: *mut root::TMC_LinearRamp, precision: u32);
    }
    extern "C" {
        pub fn tmc_ramp_linear_set_homingDistance(
            linearRamp: *mut root::TMC_LinearRamp,
            homingDistance: u32,
        );
    }
    extern "C" {
        pub fn tmc_ramp_linear_set_stopVelocity(
            linearRamp: *mut root::TMC_LinearRamp,
            stopVelocity: u32,
        );
    }
    extern "C" {
        pub fn tmc_ramp_linear_get_enabled(linearRamp: *mut root::TMC_LinearRamp) -> bool;
    }
    extern "C" {
        pub fn tmc_ramp_linear_get_maxVelocity(linearRamp: *mut root::TMC_LinearRamp) -> u32;
    }
    extern "C" {
        pub fn tmc_ramp_linear_get_targetPosition(linearRamp: *mut root::TMC_LinearRamp) -> i32;
    }
    extern "C" {
        pub fn tmc_ramp_linear_get_rampPosition(linearRamp: *mut root::TMC_LinearRamp) -> i32;
    }
    extern "C" {
        pub fn tmc_ramp_linear_get_targetVelocity(linearRamp: *mut root::TMC_LinearRamp) -> i32;
    }
    extern "C" {
        pub fn tmc_ramp_linear_get_rampVelocity(linearRamp: *mut root::TMC_LinearRamp) -> i32;
    }
    extern "C" {
        pub fn tmc_ramp_linear_get_acceleration(linearRamp: *mut root::TMC_LinearRamp) -> i32;
    }
    extern "C" {
        pub fn tmc_ramp_linear_get_state(
            linearRamp: *mut root::TMC_LinearRamp,
        ) -> root::TMC_LinearRamp_State;
    }
    extern "C" {
        pub fn tmc_ramp_linear_get_mode(
            linearRamp: *mut root::TMC_LinearRamp,
        ) -> root::TMC_LinearRamp_Mode;
    }
    extern "C" {
        pub fn tmc_ramp_linear_get_precision(linearRamp: *mut root::TMC_LinearRamp) -> u32;
    }
    extern "C" {
        pub fn tmc_ramp_linear_get_acceleration_limit(linearRamp: *mut root::TMC_LinearRamp)
            -> u32;
    }
    extern "C" {
        pub fn tmc_ramp_linear_get_velocity_limit(linearRamp: *mut root::TMC_LinearRamp) -> u32;
    }
    extern "C" {
        pub fn tmc_ramp_linear_get_homingDistance(linearRamp: *mut root::TMC_LinearRamp) -> u32;
    }
    extern "C" {
        pub fn tmc_ramp_linear_get_stopVelocity(linearRamp: *mut root::TMC_LinearRamp) -> u32;
    }
    pub const TMC_RampType_TMC_RAMP_TYPE_LINEAR: root::TMC_RampType = 0;
    pub type TMC_RampType = cty::c_uint;
    extern "C" {
        pub fn tmc_ramp_init(ramp: *mut cty::c_void, type_: root::TMC_RampType);
    }
    extern "C" {
        pub fn tmc_ramp_compute(
            ramp: *mut cty::c_void,
            type_: root::TMC_RampType,
            delta: u32,
        ) -> i32;
    }
    extern "C" {
        pub fn tmc_ramp_get_rampVelocity(ramp: *mut cty::c_void, type_: root::TMC_RampType) -> i32;
    }
    extern "C" {
        pub fn tmc_ramp_get_rampPosition(ramp: *mut cty::c_void, type_: root::TMC_RampType) -> i32;
    }
    extern "C" {
        pub fn tmc_ramp_get_enabled(ramp: *mut cty::c_void, type_: root::TMC_RampType) -> bool;
    }
    extern "C" {
        pub fn tmc_ramp_set_enabled(
            ramp: *mut cty::c_void,
            type_: root::TMC_RampType,
            enabled: bool,
        );
    }
    extern "C" {
        pub fn tmc_ramp_toggle_enabled(ramp: *mut cty::c_void, type_: root::TMC_RampType);
    }
}
